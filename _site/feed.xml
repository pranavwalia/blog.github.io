<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Pranav on Software</title>
		<description>Pranav Ahluwalia</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Fibonacci Sequence Exploration - Patterns, Proofs, Code</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/fib.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;fibonacci-sequence-exploration---patterns-proofs-code&quot;&gt;Fibonacci Sequence Exploration - Patterns, Proofs, Code&lt;/h1&gt;

&lt;p&gt;In this article we will explore various algorithms for calculating the nth Fibonacci term, derive formulas for various Fibonacci sums, and turn those formulas into programs.&lt;/p&gt;

&lt;p&gt;If you are vaguely acquainted with mathematics it is likely that you have heard of the Fibonacci sequence. A particular term of the Fibonacci sequence is the sum of the previous two terms.&lt;/p&gt;

\[F_{1} = 1 \\
F_2 = 1 \\
F_3 = 2 \\
F_4 = 3 \\
F_n = F_{n-1} + F_{n-2}\]

&lt;p&gt;Using basic induction, we can derive expressions for the sums of Fibonacci terms.&lt;/p&gt;

&lt;h2 id=&quot;the-sum-of-the-first-n-fibonacci-terms&quot;&gt;The Sum of the First N Fibonacci Terms&lt;/h2&gt;

&lt;p&gt;We will claim and prove that the sum of the first n terms of the Fibonacci sequence is equal to the sum of the nth term with the n+1th term minus 1.&lt;/p&gt;

\[claim:\space \sum_{i}^nF_i = F_{n+2} - 1\\
Base\space case:\\
\sum_{i = 1}^{2} = F_{1} + F_{2} = 2 = F_{3} -1 \\
Induction: \space assume \space claim \space holds \space true \space for \space nth \space term, \space prove \space for \space n+1.\\
[F_{(n + 2)} - 1] + F_{n+1} = F_{n + 3} - 1 = F_{((n + 1) + 2)} - 1\\
Q.E.D.\]

&lt;h2 id=&quot;the-sum-of-first-n-fibonacci-terms-with-odd-indices&quot;&gt;The Sum of First N Fibonacci Terms With Odd Indices&lt;/h2&gt;

&lt;p&gt;The sum of the first n Fibonacci terms with odd indices is the term located at 2n.&lt;/p&gt;

\[Claim: \sum_{k = 2i-1}^{2n-1}F_{k} = F_{2n}\\
Base \space Case: F_1 + F_3 = F_4 = 3\\
Induction: \space Assume \space claim \space holds \space true \space for \space nth \space term. \space Prove \space for \space n + 1. \\
Simply \space add \space the \space next \space odd \space indexed \space term \\
F_{2n} + F_{2n + 1} = F_{2n+2} = F_{2(n +1)} \\
Q.E.D.\]

&lt;h2 id=&quot;the-sum-of-first-n-fibonacci-terms-with-even-indices&quot;&gt;The Sum of First N Fibonacci Terms With Even Indices&lt;/h2&gt;

&lt;p&gt;Now let’s use our previous two results to derive the first N terms with even indices. We can simply take the sum of the first 2n terms, and subtract the sum of the first n odd terms. The result will be the sum of the Fibonacci terms of even indices.&lt;/p&gt;

\[Claim: \sum_{k=2i}^{2n}F(k) = F_{2n + 1}-1\\
\sum_{i}^{2n}F_{i} - \sum_{k=2i - 1}^{2n}F_{k} = \sum_{k=2i}^{2n}F_{k} = F_{2n + 2} - 1 - F_{2n}\\
= F_{2n + 1} + F_{2n} -1 - F_{2n} = F_{2n+1}-1 \\
Q.E.D.\]

&lt;h2 id=&quot;nth-fibonacci-term-coding-question&quot;&gt;Nth Fibonacci Term Coding Question&lt;/h2&gt;

&lt;p&gt;We will now explore four different programs; each of which return the nth Fibonacci term. We will begin with a  basic recursive technique and build up to a constant time O(1) solution.&lt;/p&gt;

&lt;h3 id=&quot;recursive-solution&quot;&gt;Recursive Solution&lt;/h3&gt;

&lt;p&gt;A recursive solution is the most obvious implementation of the nth Fibonacci term as the sequence itself is a recurrence relation.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nth_fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth_fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth_fibonacci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;time-complexity-analysis&quot;&gt;Time Complexity Analysis&lt;/h4&gt;

&lt;p&gt;We can apply the master theorem on the recurrence relation; seeing that the second recursive call is approximately the same as the first recursive call, we get the following approximation of the time complexity.&lt;/p&gt;

\[T(n) = T(n-1) + T(n-2) \approx 2T(n-1) \implies \frac{a}{b^{d}} = 2 \implies O(2^n)\]

&lt;h3 id=&quot;memoizationdynamic-programming-solution&quot;&gt;Memoization/Dynamic Programming Solution&lt;/h3&gt;

&lt;p&gt;One of the flaws in our recursive approach is that we will have repeat recursive calls. To demonstrate this, we will unwind the derived recurrence relation from above.&lt;/p&gt;

\[T(n) = T(n-1) + T(n-2) = [T(n-2) + T(n-3)] + [T(n-3) + T(n-4)]\]

&lt;p&gt;As you can see, for the first unwinding, we already have a redundant call. Just imagine how many redundant calls we accumulate for any sizeable n! To remedy this; we can use an altered approach where the computer remembers these redundant values so we do not need to recalculate them. This is known as memoization.&lt;/p&gt;

&lt;p&gt;We can drastically improve our time complexity by using an array two store previous terms. We can then produce our current term by summing up two terms which have already been saved.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;#Initialize first two terms
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the code above; we initialize the first two terms of the Fibonacci sequence and iteratively build up to our desired term by saving previous ones.&lt;/p&gt;

&lt;h4 id=&quot;time-and-space-complexity-analysis&quot;&gt;Time and Space Complexity Analysis&lt;/h4&gt;

&lt;p&gt;The time complexity of this algorithm is O(n) as we only need to perform n constant time calculations within our main loop. The space complexity is also O(n) as our array must store n terms.&lt;/p&gt;

&lt;h3 id=&quot;space-efficient-fibonacci-dp-solution&quot;&gt;Space Efficient Fibonacci DP Solution&lt;/h3&gt;

&lt;p&gt;The above dynamic programming solution reduces the time complexity for the nth Fibonacci term; but is still memory inefficient. How can we reduce our space complexity? On any given calculation; we are only utilizing the calculations of the previous two terms. For that reason; we can get away with using an array of size 3 to calculate any Fibonacci term. We can simply reallocate terms as we iterate.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#initialize length 3 array
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first two terms are base cases. The trick is that we calculate the current term and then allocate the second term as the first, and our current term as the second in the array. This prepares the array for the next calculation.&lt;/p&gt;

&lt;h4 id=&quot;time-and-space-complexity-analysis-1&quot;&gt;Time and Space Complexity Analysis&lt;/h4&gt;

&lt;p&gt;The time complexity of this solution is still O(n), and the space complexity is now O(1) as we have a constant time array initialized.&lt;/p&gt;

&lt;h3 id=&quot;constant-time-fibonacci-solution&quot;&gt;Constant Time Fibonacci Solution&lt;/h3&gt;

&lt;p&gt;It turns out there is an even faster method of calculation for the nth Fibonacci term. We will utilize &lt;a href=&quot;https://artofproblemsolving.com/wiki/index.php/Binet%27s_Formula&quot;&gt;Binet’s formula&lt;/a&gt; for the golden ratio to produce an O(1) time and space solution.&lt;/p&gt;

\[\rho = \frac{1+\sqrt{5}}{2}\\
f(n) = \frac{\rho^{n}}{\sqrt{5}}\]

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fibonacci-sums-with-code&quot;&gt;Fibonacci Sums With Code&lt;/h2&gt;

&lt;p&gt;Using the first three theorems we proved above, and our new optimal solution for the nth Fibonacci term; we can write code which calculations the sums of the first n terms, the first n even indexed terms, and odd indexed terms all in constant time and space.&lt;/p&gt;

&lt;h3 id=&quot;first-n-terms-sum&quot;&gt;First N Terms Sum&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;first-n-terms-sum-odd-indices&quot;&gt;First N Terms Sum Odd Indices&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_odd_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;first-n-terms-sum-even-indices&quot;&gt;First N Terms Sum Even Indices&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_even_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Sun, 14 Nov 2021 00:00:00 -0800</pubDate>
				<link>/fibonacci-sequence-exploration-patterns-proofs-code</link>
				<guid isPermaLink="true">/fibonacci-sequence-exploration-patterns-proofs-code</guid>
			</item>
		
			<item>
				<title>How to Ace Number Theory (and Other Proof-Based Classes)</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/number-theory.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-ace-number-theory-and-other-proof-based-classes&quot;&gt;How to Ace Number Theory (and Other Proof-Based Classes)&lt;/h1&gt;

&lt;p&gt;This Summer I took a course on number theory. The course was challenging but with the right study techniques, I was able to land an A in the class (&amp;gt;= 94%). More broadly, I want to discuss the correct study approach for performing well in &lt;em&gt;proof based&lt;/em&gt; math classes as they differ significantly from application based math courses. The American primary school system focuses almost exclusively on applied math concepts. This leaves most college students unprepared for the absolute onslaught of proofs involved in an undergraduate math degree. A typical course in number theory covers&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;divisibility&lt;/li&gt;
  &lt;li&gt;prime numbers&lt;/li&gt;
  &lt;li&gt;Diophantine equations&lt;/li&gt;
  &lt;li&gt;Pythagorean triplets&lt;/li&gt;
  &lt;li&gt;induction&lt;/li&gt;
  &lt;li&gt;linear and quadratic congruences&lt;/li&gt;
  &lt;li&gt;theorems of Euclid, Euler, Fermat, and Wilson&lt;/li&gt;
  &lt;li&gt;reciprocity&lt;/li&gt;
  &lt;li&gt;continued fractions&lt;/li&gt;
  &lt;li&gt;basic cryptography&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-four-stages-of-competence&quot;&gt;The Four Stages of Competence&lt;/h2&gt;

&lt;p&gt;There are &lt;a href=&quot;https://en.wikipedia.org/wiki/Four_stages_of_competence&quot;&gt;four stages of competence&lt;/a&gt; in psychology:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unconscious Incompetence: you don’t know what you don’t know&lt;/li&gt;
  &lt;li&gt;Conscious Incompetence: you know what you don’t know&lt;/li&gt;
  &lt;li&gt;Conscious Competence: you somewhat know the material&lt;/li&gt;
  &lt;li&gt;Unconscious Competence: you effortlessly know the material&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To perform well in a math course, you must reach the unconscious competence stage. You know you have reached unconscious competence when solving any problem from the course is trivial. I want to emphasize that the key to reaching this level of mastery does not lie in increasing your study time, but concentrating your time on the correct tasks in the correct order. In all likelihood, implementing these study strategies will &lt;em&gt;decrease&lt;/em&gt; your total time spent studying as well as your stress around exam time. The rest of this post will focus on how to efficiently reach unconscious competence.&lt;/p&gt;

&lt;h2 id=&quot;note-taking&quot;&gt;Note Taking&lt;/h2&gt;

&lt;p&gt;For any math class, taking notes is pretty straightforward. Simply copy everything the professor writes on the board. When you have questions write the question next to the related notes, then raise your hand and ask it. When you receive the answer, write the answer close to where you wrote the question. Your notes will now look like an annotated version of the professor’s lecture.&lt;/p&gt;

&lt;h2 id=&quot;strategy-0-review-fundamentals-in-the-first-week&quot;&gt;Strategy 0: Review Fundamentals In The First Week&lt;/h2&gt;

&lt;p&gt;At the beginning of a proof-based math course it pays dividends to review fundamental concepts. These include: quadratic expansions, factorizations, cubic expansions, common sequences, series, sums and the binomial theorem. Having these concepts fresh in your mind will accelerate the speed at which you digest the information covered in the course and aid in solving tricky proofs.&lt;/p&gt;

&lt;h2 id=&quot;strategy-1-daily-lecture-note-worship&quot;&gt;Strategy 1: Daily Lecture-Note Worship&lt;/h2&gt;

&lt;p&gt;One of the toughest components of taking proof based math courses is the sheer volume of information you have to process. In applied math classes, you are commonly shown a specific problem solving algorithm, and are merely tasked with repeating it across a wide variety of cases. In proof based classes, you are introduced to a massive library of axioms, theorems, and definitions; all of which you will need to have mastered and on hand so you can solve increasingly complex problems. Oftentimes you will need to devote significant thought to a problem before a solution becomes apparent.&lt;/p&gt;

&lt;p&gt;After each lecture, go through your notes.  Assure that if you were tasked with giving the same lecture, you would be able to do so flawlessly. This exercise will expose subtle misconceptions acquired during class. Clearing these doubts immediately will save you time and stress. In practice, this looks like glancing/scanning a page from your notes, re-writing it from memory while explaining the concepts out-loud as if you were the professor. You will inevitably slip up on occasion. When you do; this is an opportunity to close a gap in your knowledge.&lt;/p&gt;

&lt;p&gt;The brain can be deceiving. It is easy to read a math proof and think to oneself “this makes sense.” But, the true test of understanding is being able to replicate it from scratch.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;You glance at a page of your lecture notes and start deriving all the theorems from the page. On one particular theorem you get stuck. If you spend a non-trivial time trying to finish the proof, you should refer back to your notes and then resume. You repeat this process until you can derive and explain every theorem from the page without pausing or referring back to your notes.&lt;/p&gt;

&lt;p&gt;Use this checklist to make sure you’ve implemented this correctly.&lt;/p&gt;

&lt;h3 id=&quot;checklist&quot;&gt;Checklist&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;I can recall all definitions, theorems, axioms, and proofs covered from lecture&lt;/li&gt;
  &lt;li&gt;I can solve any example problem covered in class effortlessly&lt;/li&gt;
  &lt;li&gt;I can comfortably talk about the main ideas covered in the lecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Completing this step should place you comfortably at the conscious competence level. The proofs from your homework assignments will involve similar techniques to the theorems and examples introduced in class. By reviewing your lecture before starting your homework, you save yourself time spent flipping back and forth between notes while trying to solve problems. Additionally, you are reducing your exam preparation time down the road.&lt;/p&gt;

&lt;h2 id=&quot;strategy-2-chunking&quot;&gt;Strategy 2: Chunking&lt;/h2&gt;

&lt;p&gt;The idea of chunking is that by mastering simpler problem solving patterns first, you free up working memory to focus on more complex patterns. This concept is intuitive. Perhaps at some point in your math journey, solving a simple linear equation was extremely challenging. Then shortly after mastering these patterns, you moved onto systems of equations, then quadratic equations, and systems of quadratic equations. Using the same techniques required to solve simple linear equations but chaining them together with additional concepts.&lt;/p&gt;

&lt;p&gt;Had you only vaguely learned solving linear equations, the subsequent topics would require far more working memory, and the total cognitive load of the task at hand would be overwhelming. How can you chunk in practice?&lt;/p&gt;

&lt;p&gt;I use an acronym: DRA (derive, recite, apply). When you learn a new theorem; derive it from scratch. Once you understand the intuition behind it; repeat the proof/theorem until you’ve memorized it. Finally, use the theorem in specific applications (typically given in homework problems). This will ensure you have ‘chunked’ the concept so that it does not require additional working memory and becomes second nature. Undoubtedly, there will be further theorems introduced that rely on more earlier theorems taught in class. Such classes often build an axiomatic pyramid that can lose students who have not invested the time to strengthen their foundation.&lt;/p&gt;

&lt;h2 id=&quot;strategy-3-two-pass-technique&quot;&gt;Strategy 3: Two-Pass Technique&lt;/h2&gt;

&lt;p&gt;You will be given homework assignments. During the first pass-through, you will devote significant chunks of time to thinking through each problem carefully. Once you complete the assignment, quickly solve every problem once more. You will find that the second pass-through is faster. Additionally, you will make the transition from conscious competence to unconscious competence.&lt;/p&gt;

&lt;h3 id=&quot;checklist-1&quot;&gt;Checklist&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;I can solve any question from the assignment at lightning speed&lt;/li&gt;
  &lt;li&gt;I have a good understanding of each problem and how it relates to the topics covered in class&lt;/li&gt;
  &lt;li&gt;I can recall all of the definitions, theorems, and axioms the homework has covered&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strategy-4-hard-questions-only-exam-prep&quot;&gt;Strategy 4: Hard Questions Only (exam prep)&lt;/h2&gt;

&lt;p&gt;There are two variables that will effect your exam performance: accuracy and speed. You have already done every homework assignment twice; mastered all the content in your lectures as you learned it. There isn’t much left to do. Most students study lightly throughout the semester and study intensively around exam time. We have done the inverse: mastered every topic as we learned it. Before the exam, pick a few of the hardest questions from your homework assignments and lectures. Make sure you are able to solve these problems at lightning speed. Studying base-case or easy problems is a waste of time. The time spent before exams should be focused on making sure there aren’t any subtle misconceptions lingering in your mind.&lt;/p&gt;

&lt;h2 id=&quot;strategy-5-exam-performance&quot;&gt;Strategy 5: Exam Performance&lt;/h2&gt;

&lt;p&gt;Even if you prepare rigorously for the exam, there is still a chance you will see problems you cannot immediately solve. This is normal as some of the problems might be tricky and require deep thought/insight. If you come across such a problem, do not linger on it. Read it, think about it briefly, and proceed to solve other problems. Once all questions you are able to immediately solve are complete, return to the harder questions.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As long as you follow the steps covered in this article, there shouldn’t be any reason why you can’t land an A in number theory or any proof-based class for that matter. It is important to note that cramming is not an option for these classes. In the past you may have succeeded in cramming for Calculus, but proof-based classes are &lt;em&gt;insight driven&lt;/em&gt;. As such, the concepts require time for rumination.&lt;/p&gt;
</description>
				<pubDate>Mon, 28 Jun 2021 00:00:00 -0700</pubDate>
				<link>/how-to-ace-number-theory</link>
				<guid isPermaLink="true">/how-to-ace-number-theory</guid>
			</item>
		
			<item>
				<title>Building My Quant Interview Prep Curriculum</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/quant.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;building-my-quant-interview-prep-curriculum&quot;&gt;Building My Quant Interview Prep Curriculum&lt;/h1&gt;

&lt;p&gt;I will be graduating in Spring 2022 with a degree in Computer Science and Mathematics from &lt;a href=&quot;https://www.northeastern.edu&quot;&gt;Northeastern University&lt;/a&gt;. Despite having had more than a year’s worth of internship experience, I have been at a slight fork in the road in terms of knowing the exact job/career path I want to specialize in.&lt;/p&gt;

&lt;p&gt;I spent 10 months working at a FFRDC (federally funded research and development center) in Cyber Security, two months working at Dell (also in Cyber), and 4 months working as a software engineer at a well established fintech company. As of now, my ideal industry is quantitative finance as I believe the subject matter, and work environment to be a good fit for my personality type.&lt;/p&gt;

&lt;p&gt;The quantitative hedge fund industry seems analogous to a highly abstracted game of poker where billions of dollars are on the line. Working in such an industry will allow me to merge my competitive drives (satisfied by poker) with my intelectual drives (satisfied by coding and math.) These jobs are certainly not easy to break into and demand a high degree of interview preparation. That being said, the skills tested in these interviews seem to cover the entire subject matter of my mathematics degree. Therefore, the act of preparing for these interviews will aid in the total assimilation of what I have learned these last 4 years and are a &lt;em&gt;worthwhile activity regardless of my career outcome&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Based on my educational background, there are two viable job archetypes I am suited for: quantitative developer, and quantitative trader. After conducting exhaustive research I have come to the conclusion that the day to day job functions of both these roles differ based on the strategies deployed by specific funds.&lt;/p&gt;

&lt;p&gt;Quantitative traders utilize tools built by quantitative developers to execute upon strategies developed by quantitative researchers. Traders are ocassionally extended research responsibilities and as well as development tasks depending on the organizational structure, strategy set, and size of the hedge fund.&lt;/p&gt;

&lt;p&gt;The archetype of a quantitative developer appears to be back-end focused requiring skills in C++, Python combined with algorithm skills and well developed mathematical maturity. Additionally, database programming skills (SQL) and knowledge of networks and distributed systems seem to be in high demand as well.&lt;/p&gt;

&lt;p&gt;The interview process for a quantitative developer focuses heavily on algorithms and data structures with bits of math brain teasers dropped in. A quantitative trader interview is the complement of a quant-dev interview: math brain teaser heavy with bits of algorithm and data structures dropped in.&lt;/p&gt;

&lt;p&gt;I have concocted a hybrid interview prep curriculum to ensure I am prepared for both interviews. The benefit is that practicing the mathematical brain-teasers along with algorithms and data structures will prepare me for machine learning engineer interviews at big tech companies. Therefore, I believe this interview prep curriculum to be a sound hedge that will increase my market value regardless of whether I make it into a hedge fund or not.&lt;/p&gt;

&lt;h2 id=&quot;quantitative-developer-archetype&quot;&gt;Quantitative Developer Archetype&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;C++/Python/Matlab&lt;/li&gt;
  &lt;li&gt;Familiarity with machine learning concepts and models&lt;/li&gt;
  &lt;li&gt;Knowledge of networks and distributed systems&lt;/li&gt;
  &lt;li&gt;Database programming&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;quant-developer-interview-prep&quot;&gt;Quant Developer Interview Prep&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;C++ specific knowledge (pointers, templates, design patterns, modern C++ concepts)&lt;/li&gt;
  &lt;li&gt;Algorithms and Data Structures&lt;/li&gt;
  &lt;li&gt;SQL knowledge (joins and ability to formulate complex queries)&lt;/li&gt;
  &lt;li&gt;Probability brain teasers&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;materials&quot;&gt;Materials&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.educative.io/courses/grokking-the-coding-interview&quot;&gt;Grokking The Coding Interview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quantitative-trader-archetype&quot;&gt;Quantitative Trader Archetype&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;High degree of mathematical maturity&lt;/li&gt;
  &lt;li&gt;Python/Matlab&lt;/li&gt;
  &lt;li&gt;Financial mathematics + applied derivatives&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;quant-trader-interview-prep&quot;&gt;Quant Trader Interview Prep&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Mental Math&lt;/li&gt;
  &lt;li&gt;Probability and Statistics&lt;/li&gt;
  &lt;li&gt;Miscelanious logic and math brain-teasers&lt;/li&gt;
  &lt;li&gt;Calculus and Linear algebra trick questions&lt;/li&gt;
  &lt;li&gt;Basic stochastic processes&lt;/li&gt;
  &lt;li&gt;Financial mathematics (options)&lt;/li&gt;
  &lt;li&gt;Light algorithms and data structures&lt;/li&gt;
  &lt;li&gt;well developed mathematical proof concepts&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;study-materials&quot;&gt;Study Materials&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mathtrainer.org&quot;&gt;Math Trainer (mental math training tool)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Heard-Street-Quantitative-Questions-Interviews/dp/0994138695/ref=sr_1_1?dchild=1&amp;amp;keywords=Heard+on+the+street&amp;amp;qid=1624396275&amp;amp;sr=8-1&quot;&gt;Heard on The Street&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Practical-Guide-Quantitative-Finance-Interviews/dp/1735028800/ref=sr_1_1?dchild=1&amp;amp;keywords=a+practical+guide+to+quantitative+finance+interviews&amp;amp;qid=1624396241&amp;amp;sr=8-1&quot;&gt;A Practical Guide To Quantitative Finance Interviews&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;study-plan&quot;&gt;Study Plan&lt;/h2&gt;

&lt;h3 id=&quot;module-1-probability-and-statistics--sliding-window-algorithms&quot;&gt;Module 1: Probability and Statistics + Sliding Window Algorithms&lt;/h3&gt;

&lt;p&gt;In this first module, I will do a comprehensive refresher of probability and statistics and practice sliding window algorithm questions on &lt;a href=&quot;https://leetcode.com&quot;&gt;leetcode&lt;/a&gt;. My understanding of Probability is decent as I have taken multiple courses that have covered the subject matter.&lt;/p&gt;

&lt;h4 id=&quot;materials-1&quot;&gt;Materials&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;A Practical Guide to Quantitative Finance Interviews
    &lt;ul&gt;
      &lt;li&gt;Chapter 4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Heard On The Street
    &lt;ul&gt;
      &lt;li&gt;Chapter 4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/tag/sliding-window/&quot;&gt;Grokking The Coding Interview: Sliding Window&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;module-2-general-brain-teasers--two-pointer-technique&quot;&gt;Module 2: General Brain Teasers + Two Pointer Technique&lt;/h3&gt;

&lt;p&gt;The brain teaser section of both the quant prep books cover a variety of math topics. The questions test basic math but in novel and interesting ways. The two pointer technique questions on leetcode will aid in building my algorithm skills.&lt;/p&gt;

&lt;h4 id=&quot;materials-2&quot;&gt;Materials&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;A Practical Guide To Quantitative Finance Interviews
    &lt;ul&gt;
      &lt;li&gt;Chapter 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Heard On The Street
    &lt;ul&gt;
      &lt;li&gt;Chapter 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Grokking The Coding Interview: Two Pointer Technique&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;module-3-calculuslinear-algebra-review--fast--slow-pointers&quot;&gt;Module 3: Calculus/Linear Algebra Review + Fast &amp;amp; Slow Pointers&lt;/h3&gt;

&lt;p&gt;I expect the calculus and linear algebra review to go smoothly. I recall most of this content so the preparation process will simply entail solving the questions from the prep book and actively seeking tough questions from my old textbooks.&lt;/p&gt;

&lt;h4 id=&quot;materials-3&quot;&gt;Materials&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;A Practical Guide To Quantitative Finance Interviews
    &lt;ul&gt;
      &lt;li&gt;Chapter 3&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Grokking The Coding Interview: Fast &amp;amp; Slow Pointers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;module-4-stochastic-processes--merge-intervals&quot;&gt;Module 4: Stochastic Processes + Merge Intervals&lt;/h3&gt;

&lt;p&gt;I will likely need to refresh some of my stochastic processes knowledge from my previous coursework.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A practical Guide to Quantitative Finance Interviews
    &lt;ul&gt;
      &lt;li&gt;Chapter 5&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Grokking The Coding Interview: Merge Intervals&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;module-5-finish-grokking-the-coding-interview--mental-math&quot;&gt;Module 5: Finish Grokking The Coding Interview + Mental Math&lt;/h3&gt;

&lt;p&gt;At this point, I will wrap up my interview prep by finishing Grokking The Coding Interview, and aiming to hit level 99 on math-trainer.&lt;/p&gt;

&lt;h4 id=&quot;materials-4&quot;&gt;Materials&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Grokking The Coding Interview
    &lt;ul&gt;
      &lt;li&gt;Cyclic Sort&lt;/li&gt;
      &lt;li&gt;In-Place reversal of a linked list&lt;/li&gt;
      &lt;li&gt;Tree breadth first search&lt;/li&gt;
      &lt;li&gt;Tree depth first search&lt;/li&gt;
      &lt;li&gt;Two Heaps&lt;/li&gt;
      &lt;li&gt;Subets&lt;/li&gt;
      &lt;li&gt;Modified Binary Search&lt;/li&gt;
      &lt;li&gt;Bitwise XOR&lt;/li&gt;
      &lt;li&gt;Top ‘K’ elements&lt;/li&gt;
      &lt;li&gt;K-way merge&lt;/li&gt;
      &lt;li&gt;Knapsack&lt;/li&gt;
      &lt;li&gt;Topological Sort&lt;/li&gt;
      &lt;li&gt;Miscellaneous&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Math Trainer: Reach Level 99&lt;/li&gt;
  &lt;li&gt;Practice squaring, and square roots of large numbers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;module-6-estimations&quot;&gt;Module 6: Estimations&lt;/h3&gt;

&lt;p&gt;Many quant interviews and big tech interviews have been known to ask estimation-based questions. These include ‘how much should you charge to wash every window in Seattle’ and the like. There is an abundance of questions available online for practice. These will be the final and lowest priority aspect of my interview prep.&lt;/p&gt;

</description>
				<pubDate>Tue, 22 Jun 2021 00:00:00 -0700</pubDate>
				<link>/quant-interview-prep-curriculum</link>
				<guid isPermaLink="true">/quant-interview-prep-curriculum</guid>
			</item>
		
			<item>
				<title>Trailing Zeros of A Factorial With Legendre's Formula</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/factorial.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;legendres-formula&quot;&gt;Legendre’s Formula&lt;/h2&gt;

&lt;p&gt;There is a theorem in number theory known as &lt;a href=&quot;https://artofproblemsolving.com/wiki/index.php/Legendre%27s_Formula&quot;&gt;&lt;em&gt;Legendre’s Formula&lt;/em&gt;&lt;/a&gt;. It states that if N is a positive integer and p is a prime number, then the highest power of p that divides N! is given by the following formula&lt;/p&gt;

\[e_{p} = \sum_{i = 1}^{\infty}\lfloor{\frac{N}{p^{i}}}\rfloor\]

&lt;p&gt;Translating math to english this reads “The highest power of p that divides N! is the infinite sum of the floor of N divided by p to the current exponent”&lt;/p&gt;

&lt;p&gt;We know that the infinite sum will eventually reach a terminal value of 0 as at some point, we will reach a large enough exponent for p that the result of dividing n by p raised to i is less than 1. And taking the &lt;a href=&quot;https://en.wikipedia.org/wiki/Floor_and_ceiling_functions&quot;&gt;floor&lt;/a&gt; of any value less than 1 will give us 0. Therefore, we do not need to worry about adding up an infinite amount of quotients unless our N is astronomically large.&lt;/p&gt;

&lt;h3 id=&quot;adaptation-for-trailing-zeros&quot;&gt;Adaptation For Trailing Zeros&lt;/h3&gt;

&lt;p&gt;This formula will allow us to determine the highest power of p in N!. But what about non-prime values? We can take the prime factorization of our target number and run separate instances of the function. Since 10 is the product of 2 and 5, we can simply take the minimum value returned by running the formula on 2, and then 5.&lt;/p&gt;

\[\min(\sum_{i = 1}^{\infty}\lfloor{\frac{N}{2^{i}}}\rfloor,\sum_{i = 1}^{\infty}\lfloor{\frac{N}{5^{i}}}\rfloor)\]

&lt;p&gt;But, knowing that powers of 5 will always be larger than powers of two, the number returned by Legendre’s formula for 5 will always be smaller. Therefore, we can dispense with the minimum function altogether and simply find out how many exponents of 5 divide into the factorial. This will give us the number of trailing zeros.&lt;/p&gt;

&lt;h2 id=&quot;example-problems&quot;&gt;Example Problems&lt;/h2&gt;

&lt;h4 id=&quot;trailing-zeros-in-100&quot;&gt;Trailing zeros in 100!&lt;/h4&gt;

\[\sum_{i = 1}^{\infty}\lfloor{\frac{100}{5^{i}}}\rfloor) = \lfloor\frac{100}{5}\rfloor + \lfloor\frac{100}{5^{2}}\rfloor = 20 +4 = 24\]

&lt;p&gt;We have 24 trailing zeros in 100!&lt;/p&gt;

&lt;h4 id=&quot;trailing-zeros-in-95&quot;&gt;Trailing zeros in 95!&lt;/h4&gt;

\[\sum_{i = 1}^{\infty}\lfloor{\frac{95}{5^{i}}}\rfloor) = \lfloor\frac{95}{5}\rfloor + \lfloor\frac{95}{5^{2}}\rfloor = 19 + 3 = 22\]

&lt;p&gt;We have 22 traling zeros in 95!&lt;/p&gt;

&lt;h2 id=&quot;trailing-zeros-coding-question&quot;&gt;Trailing Zeros Coding Question&lt;/h2&gt;

&lt;p&gt;Suppose we want to write a program to find the number of trailing zeros in n!. We can simply translate our algorithm into code. We will use a while loop to iterate until the floor of our number divided by 5 to our current exponent yields zero. While iterating we will track the sum and return it upon termination. Leetcode features &lt;a href=&quot;https://leetcode.com/problems/factorial-trailing-zeroes/&quot;&gt;this exact question&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trailingZeroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;power&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Tue, 08 Jun 2021 00:00:00 -0700</pubDate>
				<link>/factorial-trailing-zeros</link>
				<guid isPermaLink="true">/factorial-trailing-zeros</guid>
			</item>
		
			<item>
				<title>Performance Psychology For Computer Science and Math</title>
				<description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this article, I will discuss performance variation, methods of practice, and the fundamental problem solving skills that I believe contribute to high performance in technical fields. These insights are informed by documented concepts in performance psychology.&lt;/p&gt;

&lt;h2 id=&quot;performance-gradients&quot;&gt;Performance Gradients&lt;/h2&gt;

&lt;p&gt;It is typical for people to believe their skill at any task exists at some fixed constant. The reality is that one’s performance follows a normal distribution. let us define:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A-Performance: peak mental clarity; also known as a ‘flow state’&lt;/li&gt;
  &lt;li&gt;B-Performance: Average performance; not incredible but enough to get the job done&lt;/li&gt;
  &lt;li&gt;C-Performance: Your worst performance; everything is a struggle&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-inch-worm-model&quot;&gt;The Inch Worm Model&lt;/h3&gt;

&lt;p&gt;As your skill level increases at any task, gradually your A performance will become your B-performance, Your old B performance will now be your C-performance, and your new A-performance will blast into new frontiers. As such, skill progression occurs in an ‘inch-worm’ like fashion where the normal distribution slowly creeps forward one standard deviation at a time. Previously difficult tasks gradually become effortless.&lt;/p&gt;

&lt;h3 id=&quot;defining-mastery&quot;&gt;Defining Mastery&lt;/h3&gt;

&lt;p&gt;Let us define mastery as the ability to competently execute a task in a state of C-Performance. I recall being adamant about proving this theorem to my father after a long early morning flight home to Dallas following a late-night dinner party in Boston just to make sure I had mastered the proof [For proof details see bottom of article].&lt;/p&gt;

\[Prove \space 3|a-b \implies\space 9|a^{3}-b^{3}\]

&lt;p&gt;I needed to demonstrate mastery to myself by proving this theorem in a state of helplessness and exhaustion.&lt;/p&gt;

&lt;h4 id=&quot;handling-the-pressure&quot;&gt;Handling The Pressure&lt;/h4&gt;

&lt;p&gt;There is a common complaint among undergraduate students in Computer Science that goes something like “I am just a bad test taker.” But the reality is this: by default, everyone is a bad test taker. The nature of an exam dictates that you are in a controlled environment where you must overcome a set of challenges under tight time constraints. Furthermore, your performance across 90 minutes dictates 75% of your results after 3 months of hard work. Few people if any are naturally acclimated to such high stakes.&lt;/p&gt;

&lt;p&gt;Yet, if you are unable to effectively recall and execute on your knowledge in a high pressure environment, is it going to be of any use to you in the first place? Life is full of pressures, and any high performance work environment will reflect similar if not greater challenges. Of course, I am not arguing that exam performance is a direct indicator of work performance. I am arguing that exams are a perfectly valid way to assess mastery in subjects where the quality of one’s work is closely coupled to one’s mental state.&lt;/p&gt;

&lt;p&gt;I have taken exams in a state of sleep deprivation, hunger, and varying degrees of suboptimal conditions; and when I have truly known the material: I have aced said exams under C-performance conditions. The aim of learning should be to internalize information to the extent that it becomes second nature.&lt;/p&gt;

&lt;h2 id=&quot;categories-of-practice&quot;&gt;Categories of Practice&lt;/h2&gt;

&lt;p&gt;There are different ways to practice programming/math. Not all practice mechanisms are created equal. There are three categories of practice one can engage in. They are listed in order of their effectiveness.&lt;/p&gt;

&lt;h3 id=&quot;frontier-practice&quot;&gt;Frontier Practice&lt;/h3&gt;

&lt;p&gt;The speed at which one enhances their skills is heavily dependent on how much ‘frontier practice’ they engage in. Frontier practice occurs when one is operating at the upper limits of their capabilities. Solving that really windy, and complex proof. Writing a solution to that very difficult dynamic programming question. Figuring out how to automate testing for a highly complex and out-dated C++ code-base.&lt;/p&gt;

&lt;h3 id=&quot;execution-practice&quot;&gt;Execution Practice&lt;/h3&gt;

&lt;p&gt;Execution practice is practice where one solidifies their understanding of previously learned concepts by executing them repeatedly until they become effortless. This is an important aspect of mastery but should not be overused as one can get comfortable staying within a certain difficulty level. Deriving those continuity proofs at lightning speed. Using a familiar web-application framework to create a MVP over a few days. This is the sweet spot where most of your work capitalization will occur.&lt;/p&gt;

&lt;h3 id=&quot;affirmation-practice&quot;&gt;Affirmation Practice&lt;/h3&gt;

&lt;p&gt;Affirmation practice can be considered the lowest form of practice. You have already mastered these tasks and are simply performing them out of necessity or to affirm just how good you are at them. This is not where growth occurs. Additionally, any exam or ‘test’ scenario should be at the level of affirmation, not at the level of execution.&lt;/p&gt;

&lt;h3 id=&quot;how-much-of-each&quot;&gt;How Much of Each?&lt;/h3&gt;

&lt;p&gt;Exactly how much time should be dedicated to frontier practice vs execution practice is something I have experimented with heavily. Frontier practice is crucial but will exhaust you of your emotional and mental energy fast. As such, frontier practice is where the greatest skill jumps occur but not where the greatest productivity occurs. Execution practice is the bread and butter of where you will produce your best work, but if you are not constantly pushing into new frontiers, the value of your skills will soon run dry.&lt;/p&gt;

&lt;h2 id=&quot;decomposing-problem-solving-skills&quot;&gt;Decomposing Problem Solving Skills&lt;/h2&gt;

&lt;p&gt;What are the fundamental skills that allow an individual to attain excellence in Computer Science and Mathematics? After surveying numerous professors and industry professionals these are the answers I have walked away with.&lt;/p&gt;

&lt;h3 id=&quot;abstraction&quot;&gt;Abstraction&lt;/h3&gt;

&lt;p&gt;The ability to solve a particular problem, and generalize the techniques to other problems&lt;/p&gt;

&lt;h4 id=&quot;abstraction-example&quot;&gt;Abstraction Example&lt;/h4&gt;

&lt;p&gt;You know the proof to 
\(\sum_{i=1}^{n}i = \frac{n(n+1)}{2}\)
Therefore you are able to easily prove 
\(\sum_{i}^{n}i^{3} = (\sum_{i}^{n}i)^{2}\)
This is an example of abstraction. You take the general method of proof by induction and are able to generalize this tactic to more complex problems. If you know the proof to the first problem, and you are unable to prove the one above, you might have weak abstraction skills.&lt;/p&gt;

&lt;h4 id=&quot;abstraction-practice-tactics&quot;&gt;Abstraction Practice Tactics&lt;/h4&gt;

&lt;p&gt;The only way to practice the skill of abstraction is to solve the hardest problems available to you in a given category. If you are learning continuity proofs in your real analysis class for example, do not be content with the homework questions given to you. Make sure you solve the hardest questions in the book that require you to integrate multiple concepts into a single problem.&lt;/p&gt;

&lt;h3 id=&quot;computation&quot;&gt;Computation&lt;/h3&gt;

&lt;p&gt;The ability to execute previously memorized techniques and algorithms&lt;/p&gt;

&lt;h4 id=&quot;computation-practice-tactics&quot;&gt;Computation Practice Tactics&lt;/h4&gt;

&lt;p&gt;Solving derivatives, integrals, difficult equations, tough questions in probability, and practicing mental math are all ways to enhance your computation skills. While the subject matter of these questions is simple, the difficulty of these questions can be modulated infinitely.&lt;/p&gt;

&lt;h3 id=&quot;construction&quot;&gt;Construction&lt;/h3&gt;

&lt;p&gt;While abstraction is the ability to generalize previously seen problem solving techniques, construction is the ability to derive entirely new problem solving strategies. This is the hardest skill to cultivate. I personally do not know how one can cultivate the ability to consistently produce breakthroughs and the quest for such powers will likely be the aim of my life until I die.&lt;/p&gt;

&lt;h4 id=&quot;construction-examples&quot;&gt;Construction Examples&lt;/h4&gt;

&lt;p&gt;Newton inventing Calculus, Archimedes discovering how to calculate the volume of a sphere and cylinder. Less impressive: solving that weird computer graphics question on one of my algorithm assignments&lt;/p&gt;

&lt;h2 id=&quot;bonus-proof&quot;&gt;Bonus Proof&lt;/h2&gt;

&lt;p&gt;Prove that if 3 divides into a - b, then 9 divides into ‘a’ minus ‘b’ cubed.&lt;/p&gt;

\[Prove \space 3|a-b \implies\space 9|a^{3}-b^{3} \\
Let \space a-b = 3c\\
(a-b)^{3} = a^{3} -3a^{2}b + 3ab^{2} - b^{3} = a^{3} -3ab(a - b) - b^{3} \\
Add \space 3ab(a-b) \\
a^{3} - b^{3} \therefore a^{3} - b^{3} = (a-b)^{3} +3ab(a-b) = 27c^{3} + 3ab(3c)\\
Factor \space out \space 9 \\
9(3c^{3} + abc)\\
Q.E.D.\]

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;p&gt;[1] The Psychology of Poker - Jerrod Tendler&lt;/p&gt;

&lt;p&gt;[2] Deep Work - Cal Newport&lt;/p&gt;

&lt;p&gt;[3] A Mind For Numbers - Barbara Oakly&lt;/p&gt;
</description>
				<pubDate>Sun, 30 May 2021 00:00:00 -0700</pubDate>
				<link>/performance-psychology-for-computer-science-and-math</link>
				<guid isPermaLink="true">/performance-psychology-for-computer-science-and-math</guid>
			</item>
		
			<item>
				<title>Continuity and Uniform Continuity Quick Notes (Real Analysis)</title>
				<description>&lt;h1 id=&quot;continuity-and-uniform-continuity-quick-notes-real-analysis&quot;&gt;Continuity and Uniform Continuity Quick-Notes (Real Analysis)&lt;/h1&gt;

&lt;p&gt;In this quick-notes post, we will briefly cover the definitions of continuity and uniform continuity. These concepts are fundamental to Real Analysis and the study of functions. These quick notes are no substitute for reading the text on these topics, nor are they as rigorous as lecture notes. These are a supplement that may be used to refresh proficiency or aid in the completion of problem sets.&lt;/p&gt;

&lt;h2 id=&quot;basic-continuity&quot;&gt;Basic Continuity&lt;/h2&gt;

&lt;h3 id=&quot;continuity-at-a-point&quot;&gt;Continuity at a point&lt;/h3&gt;

\[\forall x \in I, \exists\delta &amp;gt; 0,\epsilon&amp;gt;0,c \\
|x - c| &amp;lt; \delta \implies |f(x) - f(c)| &amp;lt; \epsilon\]

&lt;p&gt;For all delta, and epsilon greater than zero, if the difference between x and c is less than some arbitrarily small delta, then the difference between a function and it’s value at that point will be less than an arbitrarily small epsilon. Intuitively this just means that as x approaches a value c, the value of a function approaches f at c.&lt;/p&gt;

&lt;h3 id=&quot;continuity-everywhere&quot;&gt;Continuity Everywhere&lt;/h3&gt;

\[\forall x,c \in I, \exists\delta &amp;gt; 0,\epsilon&amp;gt;0, \\
|x - c| &amp;lt; \delta \implies |f(x) - f(c)| &amp;lt; \epsilon\]

&lt;h3 id=&quot;example-problem&quot;&gt;Example Problem:&lt;/h3&gt;
&lt;p&gt;In our scratch work, we first determine that by fixing delta at a value less than or equal to 1 (we are allowed to do this since delta can be as small as we like), this implies that x must be less than 2 which in turn shows us that our |x + 3| expression must be less than 5. Notice that we now have an algebraic expression that must be less than 5 times delta. Since we stipulated that delta must be less than or equal to one, we must set delta to the minimum of 1 and epsilon divided by five (when it is less than one). Knowing our restriction on the |x - 1| expression based on our allocation of delta, we now can do a straightforward proof once we factor our function in terms of an expression that is bound to be less than delta.&lt;/p&gt;

\[Let \space f: R \rightarrow R \space given \space by \space f(x) = x^{2} + 2x + 1\\
Prove \space the \space function \space is \space continuous \space at \space x=1 \\
Scratch \space Work:\\
|x - 1| \leq \delta \implies |f(x) - f(1)| &amp;lt; \epsilon \\
|f(x) - f(1)| = |x^{2} + 2x - 3| = |x - 1||x+3| \\
let \space \delta &amp;lt; 1, \space then \space |x-1| &amp;lt; 1 \implies -1 &amp;lt; x - 1 &amp;lt; 1 \implies 0 &amp;lt; x &amp;lt; 2\\
\therefore |x + 3| &amp;lt; |2 + 3| = 5 \space and \space |x-1||x+3| &amp;lt; 5|x-1| \\
Formal \space Proof \\
Let \space \delta = \min(1,\frac{\epsilon}{5}) \\
|x - 1| &amp;lt; \delta \implies |f(x) - f(1)| &amp;lt; 5|x-1| &amp;lt; 5\delta = 5(\frac{\epsilon}{5}) = \epsilon\]

&lt;h2 id=&quot;uniform-continuity&quot;&gt;Uniform Continuity&lt;/h2&gt;

&lt;p&gt;Uniform continuity stipulates that there must be some functionally consistent relationship between the distance of x from our target value c, and the distance between our function and the function at the value of c. To prove uniform continuity, we must show that our delta depends on some value of epsilon indicated by some expression.&lt;/p&gt;

\[Take \space \epsilon &amp;gt; 0, \delta &amp;gt; 0 \\
|x - c| &amp;lt; \delta(\epsilon) \implies |f(x) - f(c) | &amp;lt; \epsilon //\]

&lt;h3 id=&quot;example-problem-1&quot;&gt;Example Problem:&lt;/h3&gt;

\[Assuming \space f \space and \space g \space are \space both \space bounded \space and \space uniformly \space continuous, \space prove \space fg \space is\space uniformly \space continuous. \\
\\
since \space f\space and \space g\space are \space bounded \space \exists k_{f},k_{g} &amp;gt; 0 \space such \space that \\
\forall x \in I \space |f(x)| &amp;lt; k_{f} \space |g(x)| &amp;lt; k_{g} \\
\forall x,y \in I \space \exists\delta_{f}(\epsilon),\delta_{g}(\epsilon) &amp;gt; 0\space such \space that \\
|x - y| &amp;lt; \delta_{f} \implies |f(x) - f(y)| &amp;lt; \frac{\epsilon}{2k_{g}} \\
|x - y| &amp;lt; \delta_{g} \implies |g(x) - g(y)| &amp;lt; \frac{\epsilon}{2k_{f}}\\
let \space \delta = min(\delta_{f},\delta_{g})\\
|x - y| &amp;lt; \delta \implies |f(x)g(x) - f(y)g(y)| = |f(x)g(x) - f(x)g(y) + f(x)g(y) - f(y)g(y)|\\ = |f(x)||g(x)-g(y) + |g(y)|f(x)-f(y)| &amp;lt; k_{f}\frac{\epsilon}{2k_{f}} + k_{g}\frac{\epsilon}{2k_{g}} = \epsilon\]

</description>
				<pubDate>Sun, 09 May 2021 00:00:00 -0700</pubDate>
				<link>/continuity-uniform-continuity</link>
				<guid isPermaLink="true">/continuity-uniform-continuity</guid>
			</item>
		
			<item>
				<title>C++ For Jupyter Notebook</title>
				<description>&lt;p&gt;When I’m experimenting with models I typically prefer to have my math and code in the same place. Python is the language of choice for data scientists as it integrates seamlessly with &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter Notebook&lt;/a&gt; allowing for carefully placed analysis and explanations alongside code modules. However, recently I’ve been working on integrating a model into a piece of software where low latency is vital. C++ was the obvious answer in terms of language choice. I began looking for an interactive computing solution in C++ and eventually came across &lt;a href=&quot;https://github.com/jupyter-xeus/xeus&quot;&gt;Xeus&lt;/a&gt;; a C++ kernel for &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter Notebook&lt;/a&gt; and &lt;a href=&quot;https://github.com/jupyter-xeus/xeus-cling&quot;&gt;Xeus-Cling&lt;/a&gt;; a C++ interpreter. Together, these two frameworks allow for seamless interactive computing.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mac OS/Linux/(Windows is still experimental at the time of this article)&lt;/li&gt;
  &lt;li&gt;Conda package manager&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-1-install-conda&quot;&gt;Step 1: Install Conda&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Download the &lt;a href=&quot;https://www.anaconda.com/products/individual&quot;&gt;conda&lt;/a&gt; package manager and install the appropriate version for your operating system&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-2-setup&quot;&gt;Step 2: Setup&lt;/h2&gt;

&lt;p&gt;Before you install the modules, you want to set up your own environment to prevent conflicts with your default setup. Open up a terminal and type ‘conda activate’. Enter the following commands&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; cling
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, you want to install cling to your particular environment.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;xeus-cling &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, install Xeus:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;xeus &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3-open-a-notebook&quot;&gt;Step 3: Open A Notebook&lt;/h2&gt;

&lt;p&gt;Open a shell and switch to your cling environment.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda activate cling
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open a notebook&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should now see the option to create a C++ notebook in Jupyter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/xeus-cling.png&quot; alt=&quot;xeus-cling&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Sat, 28 Nov 2020 00:00:00 -0800</pubDate>
				<link>/cplusplus-for-jupyter</link>
				<guid isPermaLink="true">/cplusplus-for-jupyter</guid>
			</item>
		
			<item>
				<title>Simple Monte Carlo Options Pricer In Python</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/black-scholes.jpeg&quot; alt=&quot;black-scholes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today we will be pricing a vanilla call option using a monte carlo simulation in Python. Monte Carlo models are used by quantitative analysts to determine accurate and fair prices for securities. Typically, these models are implemented in a fast low level language such as C++. However, for the sake of ease, we’ll be using Python.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-Requisites:&lt;/h2&gt;
&lt;p&gt;Below is a list of pre-requisite knowledge to get the most out of this tutorial.&lt;/p&gt;

&lt;h3 id=&quot;required&quot;&gt;Required:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Calculus&lt;/li&gt;
  &lt;li&gt;Probability and Statistics&lt;/li&gt;
  &lt;li&gt;Very basic programming&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;recommended&quot;&gt;Recommended:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Stochastic Processes&lt;/li&gt;
  &lt;li&gt;Stochastic Calculus or an introductory asset pricing class&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;understanding-the-math&quot;&gt;Understanding The Math&lt;/h2&gt;
&lt;p&gt;Before diving into the code, we’ll cover some of the basic financial mathematics necessary to understand the model.&lt;/p&gt;

&lt;h3 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h3&gt;
&lt;p&gt;In our model we will make the following assumptions.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The price of our stock will generally increase with respect to time&lt;/li&gt;
  &lt;li&gt;The expected return is a fixed rate of the current share price&lt;/li&gt;
  &lt;li&gt;The stock follows a random-walk behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-stock-price-evolution-model&quot;&gt;The Stock Price Evolution Model&lt;/h3&gt;
&lt;p&gt;We will be using a stochastic differential equation as the model of our stock price evolution. It will consist of a component representing the expected return on the stock $S_{t}$ over an infintesimal period of time $dt$, represented by:&lt;/p&gt;

\[\mu S_{t}dt\]

&lt;p&gt;Where \(S_{t}\) is the price of our share with respect to time, and $\mu$ is our expected rate of return.&lt;/p&gt;

&lt;p&gt;To make our model representative of real share price behavior we must also add a stochastic element represented by a fixed fraction of our price $\sigma$, our share price \(S_{t}\) and a random walk process \(dW_{t}\) to construct&lt;/p&gt;

\[\sigma S_{t} dW_{t}\]

&lt;p&gt;Altogether, we get the equation:&lt;/p&gt;

\[dS_{t} = \mu S_{t}dt + \sigma S_{t} dW_{t}\]

&lt;h3 id=&quot;black-scholes-option-pricing-model&quot;&gt;Black-Scholes Option Pricing Model&lt;/h3&gt;
&lt;p&gt;The Black-Scholes option pricing model tells us the the price of a vanilla option with a compounding rate \(r\)
, expiration \(T\) and payoff function \(f\) is:
\(e^{-rT}E(f(S_{T}))\)&lt;/p&gt;

&lt;h4 id=&quot;solving-for-expectation&quot;&gt;Solving for Expectation&lt;/h4&gt;
&lt;p&gt;In order to finish deriving an expression for our fair options price, we must solve the expression within the expected payoff function. To begin with, we will use a risk-neutral stochastic differential equation (see stock price evolution model) for the expectation of 
\(S_{t}\):&lt;/p&gt;

\[dS_{t} = rS_{t}dt + \sigma S_{t}dW{t}\]

&lt;p&gt;By taking the log of both sides of the equation and using Ito’s lemma, a solution to the stochastic process:&lt;/p&gt;

\[d\log(S_{t}) = (r - \frac{1}{2}\sigma^2)dt + \sigma dW_{t}\]

&lt;p&gt;substituting a constant coefficient for d, (a convinient model simplification) we will obtain the final expression:&lt;/p&gt;

\[d\log(S_{t}) = log(S_{0}) + (r - \frac{1}{2}\sigma^2)t + \sigma W_{t}\]

&lt;p&gt;\(W_{t}\) is a brownian motion process with a mean \(0\) and variance \(T\) and normally distributed random variable \(N(0,1)\):&lt;/p&gt;

\[W_{T} = \sqrt{T}N(0,1)\]

&lt;p&gt;Our final expression for \(S_{t}\) is:&lt;/p&gt;

\[log(S_{T}) = log(S_{0}) + (r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)\]

&lt;p&gt;Raising the \(e\) to the equation, we can simplify to:&lt;/p&gt;

\[S_{T} = S_{0}e^{(r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)}\]

&lt;p&gt;We will continously sample random numbers for $N(0,1)$ into the equation while maintaining a running sum:&lt;/p&gt;

\[f(S) = (S - K)_{+}\]

&lt;p&gt;Where \(K\) is the strike price. The average of this expression where n is the number of random samples we take will be&lt;/p&gt;

\[\frac{\sum_{i}^{n} (S_{0}e^{(r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)} - K)}{n}\]

&lt;h4 id=&quot;final-expression&quot;&gt;Final Expression&lt;/h4&gt;
&lt;p&gt;Our final expression for the fair price of the option will be the above expression multiplied by \(e^{-rT}\) to complete our original black scholes model.&lt;/p&gt;

\[e^{(-rT)}\frac{\sum_{i}^{n} (S_{0}e^{(r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)} - K)}{n}\]

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;##Simple Monte Carlo Pricing Class for Vanilla Call Option
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleMCPricer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#The sigma value on the left side of the exponent
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiry&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#The sigma value on the right side of the e exponent
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root_Variance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Corresponds to the (-1/2 * sigma^2)
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itoCorr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variance&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;##Corresponds to S0e^(rT - 1/2 sigma^2T)
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movedSpot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expiry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itoCorr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runningSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;##Simulate for all paths
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;thisGauss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;##Our rootVariance already has been multiplied by the expiry
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;thisSpot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movedSpot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root_Variance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thisGauss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Determine payoff of this specific path
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;thisPayoff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisSpot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Value of option is zero is our price is less than the strike
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;thisPayoff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisPayoff&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisPayoff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runningSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thisPayoff&lt;/span&gt;
        
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runningSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-the-model&quot;&gt;Run the Model!&lt;/h3&gt;
&lt;p&gt;Let us run the model on an option with expiration in 2 years, with a strike price of 32 dollars, a current price of 30 dollars, a 10% volatility parameter, and a 3% rate of return. We will simulate 1,000,000 paths and determine the fair price.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleMCPricer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.79
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the calculated fair price of the option is 1.79 dollars.&lt;/p&gt;

&lt;h2 id=&quot;sources-and-further-reading&quot;&gt;Sources and Further Reading&lt;/h2&gt;
&lt;p&gt;[1] C++ Design Patterns and Derivatives Pricing, Mark S. Joshi&lt;/p&gt;

&lt;p&gt;[2] The Concepts and Practices of Mathematical Finance, Mark S. Joshi&lt;/p&gt;

&lt;p&gt;[3] Stock price modelling: Theory and Practice, Abdelmoula Dmouj&lt;/p&gt;
</description>
				<pubDate>Thu, 26 Nov 2020 00:00:00 -0800</pubDate>
				<link>/monte-carlo-options-python</link>
				<guid isPermaLink="true">/monte-carlo-options-python</guid>
			</item>
		
			<item>
				<title>Basic Counterfactual Regret Minimization (Rock Paper Scissors)</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/ai.jpg&quot; alt=&quot;AI&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;counterfactual-regret-minimization-rock-paper-scissors&quot;&gt;Counterfactual Regret Minimization (Rock Paper Scissors)&lt;/h1&gt;

&lt;p&gt;Counterfactual regret minimization is an important concept in algorithmic game theory. It has made the creation of super-human poker AI possible and is fundamental for solving games of imperfect information. Today we will be implementing a rock paper scissors solver. Rock paper scissors is a useful introductory example as the game has a trivial solution (just play each option 33.333% of the time randomly). Solving rock paper scissors will lay the groundwork for solving more complex games (which we will do in future articles).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: All Code Implemented In Python&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;high-level-overview&quot;&gt;High Level Overview:&lt;/h3&gt;

&lt;p&gt;The algorithm will start with a hard-coded default strategy profile. At every iteration, the solver will compute a ‘regret matched’ strategy. This is a strategy that makes the minimum viable adjustment according to the observed result. This adjusted result is then added to a running sum of all previous adjustments. The resulting &lt;em&gt;game theory optimal&lt;/em&gt; strategy will be the average of all adjusted strategies (sum of the strategies divided by the number of iterations).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Some Number of Iterations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compute a regret-matching strategy&lt;/li&gt;
  &lt;li&gt;Add strategy profile to the profile sum&lt;/li&gt;
  &lt;li&gt;Select each player action profile according to the strategy profile&lt;/li&gt;
  &lt;li&gt;Compute regrets&lt;/li&gt;
  &lt;li&gt;Add player regrets to player cumulative regrets&lt;/li&gt;
  &lt;li&gt;Return the average strategy profile&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rock-paper-scissors&quot;&gt;Rock Paper Scissors&lt;/h2&gt;

&lt;p&gt;To solve rock paper scissors we will need to program our agent to keep track of it’s current strategy and update it iteratively. There are 2 variables that are key to the algorithm. The regret sum, and the strategy sum. The regret sum is an array that records all the lost utility by choosing the suboptimal decision in the moment. The strategy sum is the sum of all adjusted strategies.&lt;/p&gt;

&lt;h3 id=&quot;key-variables&quot;&gt;Key Variables:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Indices to access options in strategy list&lt;/li&gt;
  &lt;li&gt;regretSum: A list to keep track of the total regret of each decision&lt;/li&gt;
  &lt;li&gt;strategy: A list to hold the weightings of each option in a mixed strategy&lt;/li&gt;
  &lt;li&gt;strategySum: The sum of all the strategies used thus far&lt;/li&gt;
  &lt;li&gt;oppStrategy: The strategy of a theoretical opponent against whom we must adjust&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;regret-matching&quot;&gt;Regret Matching&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Computes the strategy as the accumulated regrets / total regret&lt;/li&gt;
  &lt;li&gt;Computes the strategy sum as the given strategy sum + the newly derived strategy based on accumulated regrets&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;##Returns the adjusted strategy after an iteration
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#Normalizingsum is the sum of positive regrets. 
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#This ensures do not 'over-adjust' and converge to equilibrium
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;##This loop normalizes our updated strategy
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Default to 33%
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pull-a-random-action-according-to-current-mixed-strategy&quot;&gt;Pull A Random Action According To Current Mixed Strategy&lt;/h3&gt;

&lt;p&gt;This function will choose a random action based on our most updated strategy. Remember that the strategy list stores all the weightings for each action.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#Returns a random action according to the strategy
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;training-algorithm&quot;&gt;Training Algorithm&lt;/h3&gt;

&lt;p&gt;The following algorithm will compute the &lt;em&gt;maximally exploitative strategy&lt;/em&gt; vs a fixed strategy from an opponent. For rock paper scissors, the nash equilibrium strategy dictates that any strategy which performs an action more than 33% dictates that we play the opposing action 100% of the time.&lt;/p&gt;

&lt;h4 id=&quot;maximally-exploitative-strategy-example&quot;&gt;Maximally Exploitative Strategy Example:&lt;/h4&gt;

&lt;p&gt;Let us say our opponent is playing the following strategy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rock: 34%&lt;/li&gt;
  &lt;li&gt;Paper: 33%&lt;/li&gt;
  &lt;li&gt;Scissors: 33%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowing our opponent’s strategy, we can compute the utility of each option&lt;/p&gt;

\[EV(Rock) = .34(0) + .33(-1) + .33(1) = 0\]

&lt;p&gt;The expected value of choosing rock is zero since it ties 34% of the time, loses 33% of the time and wins another 33% of the time.&lt;/p&gt;

\[EV(Scissors) = .34(-1) + .33(1) + .33(0) = -.01\]

&lt;p&gt;The expected value of choosing scissors is -.01 since it loses to rock 34% of the time, wins against paper 33% of the time, and ties to scissors 33% of the time.&lt;/p&gt;

\[EV(Paper) = .34(1) + .33(0) + .33(-1) = .01\]

&lt;p&gt;The expected value of choosing paper is .01 since we win against rock 34% of the time, ties paper 33% of the time, and loses to scissors 33% of the time.&lt;/p&gt;

&lt;p&gt;Knowing that the expected value of choosing paper is higher than any other option, the maximally exploitative strategy would be to always play paper.&lt;/p&gt;

&lt;h4 id=&quot;maximally-exploitative-function&quot;&gt;Maximally Exploitative Function&lt;/h4&gt;

&lt;p&gt;The algorithm for training our agent to learn the maximally exploitative strategy can be described as follows.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Accumulate regretSums after every round&lt;/li&gt;
  &lt;li&gt;Compute a regret-matching strategy based on those regret sums&lt;/li&gt;
  &lt;li&gt;Add Strategy to the sum of all the previously computed profiles&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;##Retrieve Actions
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#print(strategy)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;myaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Define an arbitrary opponent strategy from which to adjust
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
        &lt;span class=&quot;c1&quot;&gt;#Opponent Chooses scissors
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Rock) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Paper) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Opponent Chooses Rock
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Scissors) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Paper) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Opopnent Chooses Paper
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Rock) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Scissors) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            
        &lt;span class=&quot;c1&quot;&gt;#Add the regrets from this decision
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;
        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;compute-the-average-strategy&quot;&gt;Compute the average strategy&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Returns the average strategy profile as each option divided by the total sum of all options&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAverageStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;avgStrategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;avgStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;avgStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avgStrategy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-the-algorithm&quot;&gt;Run the algorithm!&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Demonstrates that we can generate a maximally exploitative strat&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;oppStrat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opponent's Strategy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Maximally Exploitative Strat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAverageStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Opponent's Strategy [0.4, 0.3, 0.3]
Maximally Exploitative Strat [6.666666666666666e-07, 0.999999, 3.333333333333333e-07]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;have-both-agents-converge-to-nash-equilibrium&quot;&gt;Have Both Agents Converge to Nash Equilibrium&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;We will adapt our training algorithm to train two agents simultaneously&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#Two player training Function
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;train2Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2Strat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;##Adapt Train Function for two players
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategySum1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategySum2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;##Retrieve Actions
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategySum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategy1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategySum1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;myaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2Strat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategy2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategySum2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;#Opponent Chooses scissors
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Rock) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Paper) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Opponent Chooses Rock
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Scissors) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Paper) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Opopnent Chooses Paper
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Rock) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Scissors) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            
        &lt;span class=&quot;c1&quot;&gt;#Add the regrets from this decision
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regretSum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regretSum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategySum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategySum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#Returns a nash equilibrium reached by two opponents through CFRM
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RPStoNash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train2Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPStoNash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Player 1                                                     Player 2
([0.34083239238186, 0.3340920629119219, 0.3250755447062181], [0.32967926313477963, 0.33222032740623947, 0.3381004094589809]) As we can see. The final strategy is around 33% for all options for each player.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Mon, 23 Nov 2020 00:00:00 -0800</pubDate>
				<link>/CFRM-RPS</link>
				<guid isPermaLink="true">/CFRM-RPS</guid>
			</item>
		
			<item>
				<title>Binary Tree Traversal Cheat Sheet</title>
				<description>&lt;p&gt;Traversing binary trees is a fundamental skill required for coding interviews. Today I will teach you the main ways of traversing a binary tree. Each traversal style is associated with a specific pattern. Below is a quick reference. (All code examples are worked in python)&lt;/p&gt;

&lt;h3 id=&quot;binary-tree-traversal-cheat-sheet&quot;&gt;Binary Tree Traversal Cheat Sheet&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Traversal&lt;/th&gt;
      &lt;th&gt;-&amp;gt;&lt;/th&gt;
      &lt;th&gt;Pattern&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;In-order&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;left/center/right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pre-order&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;center/left/right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;post-order&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;left/right/center&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;level-order&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/binary-tree.PNG&quot; alt=&quot;binary-tree&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;pre-order-traversal&quot;&gt;Pre-Order Traversal&lt;/h4&gt;

&lt;p&gt;A preorder traversal follows the center-left-right pattern. For the tree above, the output would be [0,1,2,6,4,5,7,8,3]&lt;/p&gt;

&lt;h5 id=&quot;solution&quot;&gt;Solution&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;preOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;preOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;in-order-traversal&quot;&gt;In-Order Traversal&lt;/h4&gt;

&lt;p&gt;An inorder traversal follows the left-center-right pattern. The algorithm will traverse as far left as possible and then add each center node with the right node being added last. An in-order traversal of the graph above would output [2,1,4,6,5,0,7,8,3]&lt;/p&gt;

&lt;h5 id=&quot;solution-1&quot;&gt;Solution&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;post-order-traversal&quot;&gt;Post-Order Traversal&lt;/h4&gt;

&lt;p&gt;A postorder traversal follows the left-right-center pattern. For the tree above the output would be [2,4,5,6,1,8,3,7,0].&lt;/p&gt;

&lt;h5 id=&quot;solution-2&quot;&gt;Solution&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;postOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;postOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;level-order-traversal&quot;&gt;Level Order Traversal&lt;/h4&gt;

&lt;p&gt;A level order traversal will return a two dimensional list of every level in the tree. For the example above, the result would be:&lt;/p&gt;

&lt;p&gt;[[0], [1,7], [2,6,8,3], [4,5]]&lt;/p&gt;

&lt;p&gt;The code below uses a helper function. The helper function keeps track of which level of the tree it is located in.&lt;/p&gt;

&lt;h5 id=&quot;solution-3&quot;&gt;Solution&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;levelOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sat, 21 Nov 2020 00:00:00 -0800</pubDate>
				<link>/binary-tree-traversal-cheat-sheet</link>
				<guid isPermaLink="true">/binary-tree-traversal-cheat-sheet</guid>
			</item>
		
	</channel>
</rss>
