<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Pranav on Software</title>
		<description>Pranav Ahluwalia</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Counting Trailing Zeros of A Factorial With Legendre's Formula</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/factorial.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Around a year ago, I was in a zoom interview for a large tech company. I was given two reasonably challenging coding problems and aced them with ease. Then came the number theory. The interviewer asked the question “How many trailing zeros are there in 100 factorial?”&lt;/p&gt;

&lt;p&gt;This wasn’t a coding question. It was a mental math question. I had no clue where to start and guessed “16.” I was wrong. When the interview was over, I immediately googled the question. Unless you take a dedicated course in number theory, your only chance at running into this concept is in discrete math; and let’s be honest, nobody remembers discrete math.&lt;/p&gt;

&lt;h2 id=&quot;legendres-formula&quot;&gt;Legendre’s Formula&lt;/h2&gt;

&lt;p&gt;There is a theorem in number theory known as &lt;a href=&quot;https://artofproblemsolving.com/wiki/index.php/Legendre%27s_Formula&quot;&gt;&lt;em&gt;Legendre’s Formula&lt;/em&gt;&lt;/a&gt;. It states that if N is a positive integer and p is a prime number, then the highest power of p that divides N! is given by the following formula&lt;/p&gt;

\[e_{p} = \sum_{i = 1}^{\infty}\lfloor{\frac{N}{p^{i}}}\rfloor\]

&lt;p&gt;Translating math to english this reads “The highest power of p that divides N! is the infinite sum of the floor of N divided by p to the current exponent”&lt;/p&gt;

&lt;p&gt;We know that the infinite sum will eventually reach a terminal value of 0 as at some point, we will reach a large enough exponent for p that the result of dividing n by p raised to i is less than 1. And taking the &lt;a href=&quot;https://en.wikipedia.org/wiki/Floor_and_ceiling_functions&quot;&gt;floor&lt;/a&gt; of any value less than 1 will give us 0. Therefore, we do not need to worry about adding up an infinite amount of quotients unless our N is astronomically large.&lt;/p&gt;

&lt;h3 id=&quot;adaptation-for-trailing-zeros&quot;&gt;Adaptation For Trailing Zeros&lt;/h3&gt;

&lt;p&gt;This formula will allow us to determine the highest power of p in N!. But what about non-prime values? We can take the prime factorization of our target number and run separate instances of the function. Since 10 is the product of 2 and 5, we can simply take the minimum value returned by running the formula on 2, and then 5.&lt;/p&gt;

\[\min(\sum_{i = 1}^{\infty}\lfloor{\frac{N}{2^{i}}}\rfloor,\sum_{i = 1}^{\infty}\lfloor{\frac{N}{5^{i}}}\rfloor)\]

&lt;p&gt;But, knowing that powers of 5 will always be larger than powers of two, the number returned by Legendre’s formula for 5 will always be smaller. Therefore, we can dispense with the minimum function altogether and simply find out how many exponents of 5 divide into the factorial. This will give us the number of trailing zeros.&lt;/p&gt;

&lt;h2 id=&quot;example-problems&quot;&gt;Example Problems&lt;/h2&gt;

&lt;h4 id=&quot;trailing-zeros-in-100&quot;&gt;Trailing zeros in 100!&lt;/h4&gt;

\[\sum_{i = 1}^{\infty}\lfloor{\frac{100}{5^{i}}}\rfloor) = \lfloor\frac{100}{5}\rfloor + \lfloor\frac{100}{5^{2}}\rfloor = 20 +4 = 24\]

&lt;p&gt;We have 24 trailing zeros in 100!&lt;/p&gt;

&lt;h4 id=&quot;trailing-zeros-in-95&quot;&gt;Trailing zeros in 95!&lt;/h4&gt;

\[\sum_{i = 1}^{\infty}\lfloor{\frac{95}{5^{i}}}\rfloor) = \lfloor\frac{95}{5}\rfloor + \lfloor\frac{95}{5^{2}}\rfloor = 19 + 3 = 22\]

&lt;p&gt;We have 22 traling zeros in 95!&lt;/p&gt;

&lt;h2 id=&quot;trailing-zeros-coding-question&quot;&gt;Trailing Zeros Coding Question&lt;/h2&gt;

&lt;p&gt;Suppose we want to write a program to find the number of trailing zeros in n!. We can simply translate our algorithm into code. We will use a while loop to iterate until the floor of our number divided by 5 to our current exponent yields zero. While iterating we will track the sum and return it upon termination. Leetcode features &lt;a href=&quot;https://leetcode.com/problems/factorial-trailing-zeroes/&quot;&gt;this exact question&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trailingZeroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;power&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Tue, 08 Jun 2021 00:00:00 -0700</pubDate>
				<link>/factorial-trailing-zeros</link>
				<guid isPermaLink="true">/factorial-trailing-zeros</guid>
			</item>
		
			<item>
				<title>Performance Psychology For Computer Science and Math</title>
				<description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this article, I will discuss performance variation, methods of practice, and the fundamental problem solving skills that I believe contribute to high performance in technical fields. These insights are informed by documented concepts in performance psychology.&lt;/p&gt;

&lt;h2 id=&quot;performance-gradients&quot;&gt;Performance Gradients&lt;/h2&gt;

&lt;p&gt;It is typical for people to believe their skill at any task exists at some fixed constant. The reality is that one’s performance follows a normal distribution. let us define:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A-Performance: peak mental clarity; also known as a ‘flow state’&lt;/li&gt;
  &lt;li&gt;B-Performance: Average performance; not incredible but enough to get the job done&lt;/li&gt;
  &lt;li&gt;C-Performance: Your worst performance; everything is a struggle&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-inch-worm-model&quot;&gt;The Inch Worm Model&lt;/h3&gt;

&lt;p&gt;As your skill level increases at any task, gradually your A performance will become your B-performance, Your old B performance will now be your C-performance, and your new A-performance will blast into new frontiers. As such, skill progression occurs in an ‘inch-worm’ like fashion where the normal distribution slowly creeps forward one standard deviation at a time. Previously difficult tasks gradually become effortless.&lt;/p&gt;

&lt;h3 id=&quot;defining-mastery&quot;&gt;Defining Mastery&lt;/h3&gt;

&lt;p&gt;Let us define mastery as the ability to competently execute a task in a state of C-Performance. I recall being adamant about proving this theorem to my father after a long early morning flight home to Dallas following a late-night dinner party in Boston just to make sure I had mastered the proof [For proof details see bottom of article].&lt;/p&gt;

\[Prove \space 3|a-b \implies\space 9|a^{3}-b^{3}\]

&lt;p&gt;I needed to demonstrate mastery to myself by proving this theorem in a state of helplessness and exhaustion.&lt;/p&gt;

&lt;h4 id=&quot;handling-the-pressure&quot;&gt;Handling The Pressure&lt;/h4&gt;

&lt;p&gt;There is a common complaint among undergraduate students in Computer Science that goes something like “I am just a bad test taker.” But the reality is this: by default, everyone is a bad test taker. The nature of an exam dictates that you are in a controlled environment where you must overcome a set of challenges under tight time constraints. Furthermore, your performance across 90 minutes dictates 75% of your results after 3 months of hard work. Few people if any are naturally acclimated to such high stakes.&lt;/p&gt;

&lt;p&gt;Yet, if you are unable to effectively recall and execute on your knowledge in a high pressure environment, is it going to be of any use to you in the first place? Life is full of pressures, and any high performance work environment will reflect similar if not greater challenges. Of course, I am not arguing that exam performance is a direct indicator of work performance. I am arguing that exams are a perfectly valid way to assess mastery in subjects where the quality of one’s work is closely coupled to one’s mental state.&lt;/p&gt;

&lt;p&gt;I have taken exams in a state of sleep deprivation, hunger, and varying degrees of suboptimal conditions; and when I have truly known the material: I have aced said exams under C-performance conditions. The aim of learning should be to internalize information to the extent that it becomes second nature.&lt;/p&gt;

&lt;h2 id=&quot;categories-of-practice&quot;&gt;Categories of Practice&lt;/h2&gt;

&lt;p&gt;There are different ways to practice programming/math. Not all practice mechanisms are created equal. There are three categories of practice one can engage in. They are listed in order of their effectiveness.&lt;/p&gt;

&lt;h3 id=&quot;frontier-practice&quot;&gt;Frontier Practice&lt;/h3&gt;

&lt;p&gt;The speed at which one enhances their skills is heavily dependent on how much ‘frontier practice’ they engage in. Frontier practice occurs when one is operating at the upper limits of their capabilities. Solving that really windy, and complex proof. Writing a solution to that very difficult dynamic programming question. Figuring out how to automate testing for a highly complex and out-dated C++ code-base.&lt;/p&gt;

&lt;h3 id=&quot;execution-practice&quot;&gt;Execution Practice&lt;/h3&gt;

&lt;p&gt;Execution practice is practice where one solidifies their understanding of previously learned concepts by executing them repeatedly until they become effortless. This is an important aspect of mastery but should not be overused as one can get comfortable staying within a certain difficulty level. Deriving those continuity proofs at lightning speed. Using a familiar web-application framework to create a MVP over a few days. This is the sweet spot where most of your work capitalization will occur.&lt;/p&gt;

&lt;h3 id=&quot;affirmation-practice&quot;&gt;Affirmation Practice&lt;/h3&gt;

&lt;p&gt;Affirmation practice can be considered the lowest form of practice. You have already mastered these tasks and are simply performing them out of necessity or to affirm just how good you are at them. This is not where growth occurs. Additionally, any exam or ‘test’ scenario should be at the level of affirmation, not at the level of execution.&lt;/p&gt;

&lt;h3 id=&quot;how-much-of-each&quot;&gt;How Much of Each?&lt;/h3&gt;

&lt;p&gt;Exactly how much time should be dedicated to frontier practice vs execution practice is something I have experimented with heavily. Frontier practice is crucial but will exhaust you of your emotional and mental energy fast. As such, frontier practice is where the greatest skill jumps occur but not where the greatest productivity occurs. Execution practice is the bread and butter of where you will produce your best work, but if you are not constantly pushing into new frontiers, the value of your skills will soon run dry.&lt;/p&gt;

&lt;h2 id=&quot;decomposing-problem-solving-skills&quot;&gt;Decomposing Problem Solving Skills&lt;/h2&gt;

&lt;p&gt;What are the fundamental skills that allow an individual to attain excellence in Computer Science and Mathematics? After surveying numerous professors and industry professionals these are the answers I have walked away with.&lt;/p&gt;

&lt;h3 id=&quot;abstraction&quot;&gt;Abstraction&lt;/h3&gt;

&lt;p&gt;The ability to solve a particular problem, and generalize the techniques to other problems&lt;/p&gt;

&lt;h4 id=&quot;abstraction-example&quot;&gt;Abstraction Example&lt;/h4&gt;

&lt;p&gt;You know the proof to 
\(\sum_{i=1}^{n}i = \frac{n(n+1)}{2}\)
Therefore you are able to easily prove 
\(\sum_{i}^{n}i^{3} = (\sum_{i}^{n}i)^{2}\)
This is an example of abstraction. You take the general method of proof by induction and are able to generalize this tactic to more complex problems. If you know the proof to the first problem, and you are unable to prove the one above, you might have weak abstraction skills.&lt;/p&gt;

&lt;h4 id=&quot;abstraction-practice-tactics&quot;&gt;Abstraction Practice Tactics&lt;/h4&gt;

&lt;p&gt;The only way to practice the skill of abstraction is to solve the hardest problems available to you in a given category. If you are learning continuity proofs in your real analysis class for example, do not be content with the homework questions given to you. Make sure you solve the hardest questions in the book that require you to integrate multiple concepts into a single problem.&lt;/p&gt;

&lt;h3 id=&quot;computation&quot;&gt;Computation&lt;/h3&gt;

&lt;p&gt;The ability to execute previously memorized techniques and algorithms&lt;/p&gt;

&lt;h4 id=&quot;computation-practice-tactics&quot;&gt;Computation Practice Tactics&lt;/h4&gt;

&lt;p&gt;Solving derivatives, integrals, difficult equations, tough questions in probability, and practicing mental math are all ways to enhance your computation skills. While the subject matter of these questions is simple, the difficulty of these questions can be modulated infinitely.&lt;/p&gt;

&lt;h3 id=&quot;construction&quot;&gt;Construction&lt;/h3&gt;

&lt;p&gt;While abstraction is the ability to generalize previously seen problem solving techniques, construction is the ability to derive entirely new problem solving strategies. This is the hardest skill to cultivate. I personally do not know how one can cultivate the ability to consistently produce breakthroughs and the quest for such powers will likely be the aim of my life until I die.&lt;/p&gt;

&lt;h4 id=&quot;construction-examples&quot;&gt;Construction Examples&lt;/h4&gt;

&lt;p&gt;Newton inventing Calculus, Archimedes discovering how to calculate the volume of a sphere and cylinder. Less impressive: solving that weird computer graphics question on one of my algorithm assignments&lt;/p&gt;

&lt;h2 id=&quot;bonus-proof&quot;&gt;Bonus Proof&lt;/h2&gt;

&lt;p&gt;Prove that if 3 divides into a - b, then 9 divides into ‘a’ minus ‘b’ cubed.&lt;/p&gt;

\[Prove \space 3|a-b \implies\space 9|a^{3}-b^{3} \\
Let \space a-b = 3c\\
(a-b)^{3} = a^{3} -3a^{2}b + 3ab^{2} - b^{3} = a^{3} -3ab(a - b) - b^{3} \\
Add \space 3ab(a-b) \\
a^{3} - b^{3} \therefore a^{3} - b^{3} = (a-b)^{3} +3ab(a-b) = 27c^{3} + 3ab(3c)\\
Factor \space out \space 9 \\
9(3c^{3} + abc)\\
Q.E.D.\]

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;p&gt;[1] The Psychology of Poker - Jerrod Tendler&lt;/p&gt;

&lt;p&gt;[2] Deep Work - Cal Newport&lt;/p&gt;

&lt;p&gt;[3] A Mind For Numbers - Barbara Oakly&lt;/p&gt;
</description>
				<pubDate>Sun, 30 May 2021 00:00:00 -0700</pubDate>
				<link>/performance-psychology-for-computer-science-and-math</link>
				<guid isPermaLink="true">/performance-psychology-for-computer-science-and-math</guid>
			</item>
		
			<item>
				<title>Continuity and Uniform Continuity Quick Notes (Real Analysis)</title>
				<description>&lt;h1 id=&quot;continuity-and-uniform-continuity-quick-notes-real-analysis&quot;&gt;Continuity and Uniform Continuity Quick-Notes (Real Analysis)&lt;/h1&gt;

&lt;p&gt;In this quick-notes post, we will briefly cover the definitions of continuity and uniform continuity. These concepts are fundamental to Real Analysis and the study of functions. These quick notes are no substitute for reading the text on these topics, nor are they as rigorous as lecture notes. These are a supplement that may be used to refresh proficiency or aid in the completion of problem sets.&lt;/p&gt;

&lt;h2 id=&quot;basic-continuity&quot;&gt;Basic Continuity&lt;/h2&gt;

&lt;h3 id=&quot;continuity-at-a-point&quot;&gt;Continuity at a point&lt;/h3&gt;

\[\forall x \in I, \exists\delta &amp;gt; 0,\epsilon&amp;gt;0,c \\
|x - c| &amp;lt; \delta \implies |f(x) - f(c)| &amp;lt; \epsilon\]

&lt;p&gt;For all delta, and epsilon greater than zero, if the difference between x and c is less than some arbitrarily small delta, then the difference between a function and it’s value at that point will be less than an arbitrarily small epsilon. Intuitively this just means that as x approaches a value c, the value of a function approaches f at c.&lt;/p&gt;

&lt;h3 id=&quot;continuity-everywhere&quot;&gt;Continuity Everywhere&lt;/h3&gt;

\[\forall x,c \in I, \exists\delta &amp;gt; 0,\epsilon&amp;gt;0, \\
|x - c| &amp;lt; \delta \implies |f(x) - f(c)| &amp;lt; \epsilon\]

&lt;h3 id=&quot;example-problem&quot;&gt;Example Problem:&lt;/h3&gt;
&lt;p&gt;In our scratch work, we first determine that by fixing delta at a value less than or equal to 1 (we are allowed to do this since delta can be as small as we like), this implies that x must be less than 2 which in turn shows us that our |x + 3| expression must be less than 5. Notice that we now have an algebraic expression that must be less than 5 times delta. Since we stipulated that delta must be less than or equal to one, we must set delta to the minimum of 1 and epsilon divided by five (when it is less than one). Knowing our restriction on the |x - 1| expression based on our allocation of delta, we now can do a straightforward proof once we factor our function in terms of an expression that is bound to be less than delta.&lt;/p&gt;

\[Let \space f: R \rightarrow R \space given \space by \space f(x) = x^{2} + 2x + 1\\
Prove \space the \space function \space is \space continuous \space at \space x=1 \\
Scratch \space Work:\\
|x - 1| \leq \delta \implies |f(x) - f(1)| &amp;lt; \epsilon \\
|f(x) - f(1)| = |x^{2} + 2x - 3| = |x - 1||x+3| \\
let \space \delta &amp;lt; 1, \space then \space |x-1| &amp;lt; 1 \implies -1 &amp;lt; x - 1 &amp;lt; 1 \implies 0 &amp;lt; x &amp;lt; 2\\
\therefore |x + 3| &amp;lt; |2 + 3| = 5 \space and \space |x-1||x+3| &amp;lt; 5|x-1| \\
Formal \space Proof \\
Let \space \delta = \min(1,\frac{\epsilon}{5}) \\
|x - 1| &amp;lt; \delta \implies |f(x) - f(1)| &amp;lt; 5|x-1| &amp;lt; 5\delta = 5(\frac{\epsilon}{5}) = \epsilon\]

&lt;h2 id=&quot;uniform-continuity&quot;&gt;Uniform Continuity&lt;/h2&gt;

&lt;p&gt;Uniform continuity stipulates that there must be some functionally consistent relationship between the distance of x from our target value c, and the distance between our function and the function at the value of c. To prove uniform continuity, we must show that our delta depends on some value of epsilon indicated by some expression.&lt;/p&gt;

\[Take \space \epsilon &amp;gt; 0, \delta &amp;gt; 0 \\
|x - c| &amp;lt; \delta(\epsilon) \implies |f(x) - f(c) | &amp;lt; \epsilon //\]

&lt;h3 id=&quot;example-problem-1&quot;&gt;Example Problem:&lt;/h3&gt;

\[Assuming \space f \space and \space g \space are \space both \space bounded \space and \space uniformly \space continuous, \space prove \space fg \space is\space uniformly \space continuous. \\
\\
since \space f\space and \space g\space are \space bounded \space \exists k_{f},k_{g} &amp;gt; 0 \space such \space that \\
\forall x \in I \space |f(x)| &amp;lt; k_{f} \space |g(x)| &amp;lt; k_{g} \\
\forall x,y \in I \space \exists\delta_{f}(\epsilon),\delta_{g}(\epsilon) &amp;gt; 0\space such \space that \\
|x - y| &amp;lt; \delta_{f} \implies |f(x) - f(y)| &amp;lt; \frac{\epsilon}{2k_{g}} \\
|x - y| &amp;lt; \delta_{g} \implies |g(x) - g(y)| &amp;lt; \frac{\epsilon}{2k_{f}}\\
let \space \delta = min(\delta_{f},\delta_{g})\\
|x - y| &amp;lt; \delta \implies |f(x)g(x) - f(y)g(y)| = |f(x)g(x) - f(x)g(y) + f(x)g(y) - f(y)g(y)|\\ = |f(x)||g(x)-g(y) + |g(y)|f(x)-f(y)| &amp;lt; k_{f}\frac{\epsilon}{2k_{f}} + k_{g}\frac{\epsilon}{2k_{g}} = \epsilon\]

</description>
				<pubDate>Sun, 09 May 2021 00:00:00 -0700</pubDate>
				<link>/continuity-uniform-continuity</link>
				<guid isPermaLink="true">/continuity-uniform-continuity</guid>
			</item>
		
			<item>
				<title>C++ For Jupyter Notebook</title>
				<description>&lt;p&gt;When I’m experimenting with models I typically prefer to have my math and code in the same place. Python is the language of choice for data scientists as it integrates seamlessly with &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter Notebook&lt;/a&gt; allowing for carefully placed analysis and explanations alongside code modules. However, recently I’ve been working on integrating a model into a piece of software where low latency is vital. C++ was the obvious answer in terms of language choice. I began looking for an interactive computing solution in C++ and eventually came across &lt;a href=&quot;https://github.com/jupyter-xeus/xeus&quot;&gt;Xeus&lt;/a&gt;; a C++ kernel for &lt;a href=&quot;https://jupyter.org/&quot;&gt;Jupyter Notebook&lt;/a&gt; and &lt;a href=&quot;https://github.com/jupyter-xeus/xeus-cling&quot;&gt;Xeus-Cling&lt;/a&gt;; a C++ interpreter. Together, these two frameworks allow for seamless interactive computing.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mac OS/Linux/(Windows is still experimental at the time of this article)&lt;/li&gt;
  &lt;li&gt;Conda package manager&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-1-install-conda&quot;&gt;Step 1: Install Conda&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Download the &lt;a href=&quot;https://www.anaconda.com/products/individual&quot;&gt;conda&lt;/a&gt; package manager and install the appropriate version for your operating system&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-2-setup&quot;&gt;Step 2: Setup&lt;/h2&gt;

&lt;p&gt;Before you install the modules, you want to set up your own environment to prevent conflicts with your default setup. Open up a terminal and type ‘conda activate’. Enter the following commands&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; cling
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, you want to install cling to your particular environment.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;xeus-cling &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, install Xeus:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;xeus &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3-open-a-notebook&quot;&gt;Step 3: Open A Notebook&lt;/h2&gt;

&lt;p&gt;Open a shell and switch to your cling environment.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda activate cling
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open a notebook&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should now see the option to create a C++ notebook in Jupyter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/xeus-cling.png&quot; alt=&quot;xeus-cling&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Sat, 28 Nov 2020 00:00:00 -0800</pubDate>
				<link>/cplusplus-for-jupyter</link>
				<guid isPermaLink="true">/cplusplus-for-jupyter</guid>
			</item>
		
			<item>
				<title>Simple Monte Carlo Options Pricer In Python</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/black-scholes.jpeg&quot; alt=&quot;black-scholes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today we will be pricing a vanilla call option using a monte carlo simulation in Python. Monte Carlo models are used by quantitative analysts to determine accurate and fair prices for securities. Typically, these models are implemented in a fast low level language such as C++. However, for the sake of ease, we’ll be using Python.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-Requisites:&lt;/h2&gt;
&lt;p&gt;Below is a list of pre-requisite knowledge to get the most out of this tutorial.&lt;/p&gt;

&lt;h3 id=&quot;required&quot;&gt;Required:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Calculus&lt;/li&gt;
  &lt;li&gt;Probability and Statistics&lt;/li&gt;
  &lt;li&gt;Very basic programming&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;recommended&quot;&gt;Recommended:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Stochastic Processes&lt;/li&gt;
  &lt;li&gt;Stochastic Calculus or an introductory asset pricing class&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;understanding-the-math&quot;&gt;Understanding The Math&lt;/h2&gt;
&lt;p&gt;Before diving into the code, we’ll cover some of the basic financial mathematics necessary to understand the model.&lt;/p&gt;

&lt;h3 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h3&gt;
&lt;p&gt;In our model we will make the following assumptions.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The price of our stock will generally increase with respect to time&lt;/li&gt;
  &lt;li&gt;The expected return is a fixed rate of the current share price&lt;/li&gt;
  &lt;li&gt;The stock follows a random-walk behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-stock-price-evolution-model&quot;&gt;The Stock Price Evolution Model&lt;/h3&gt;
&lt;p&gt;We will be using a stochastic differential equation as the model of our stock price evolution. It will consist of a component representing the expected return on the stock $S_{t}$ over an infintesimal period of time $dt$, represented by:&lt;/p&gt;

\[\mu S_{t}dt\]

&lt;p&gt;Where \(S_{t}\) is the price of our share with respect to time, and $\mu$ is our expected rate of return.&lt;/p&gt;

&lt;p&gt;To make our model representative of real share price behavior we must also add a stochastic element represented by a fixed fraction of our price $\sigma$, our share price \(S_{t}\) and a random walk process \(dW_{t}\) to construct&lt;/p&gt;

\[\sigma S_{t} dW_{t}\]

&lt;p&gt;Altogether, we get the equation:&lt;/p&gt;

\[dS_{t} = \mu S_{t}dt + \sigma S_{t} dW_{t}\]

&lt;h3 id=&quot;black-scholes-option-pricing-model&quot;&gt;Black-Scholes Option Pricing Model&lt;/h3&gt;
&lt;p&gt;The Black-Scholes option pricing model tells us the the price of a vanilla option with a compounding rate \(r\)
, expiration \(T\) and payoff function \(f\) is:
\(e^{-rT}E(f(S_{T}))\)&lt;/p&gt;

&lt;h4 id=&quot;solving-for-expectation&quot;&gt;Solving for Expectation&lt;/h4&gt;
&lt;p&gt;In order to finish deriving an expression for our fair options price, we must solve the expression within the expected payoff function. To begin with, we will use a risk-neutral stochastic differential equation (see stock price evolution model) for the expectation of 
\(S_{t}\):&lt;/p&gt;

\[dS_{t} = rS_{t}dt + \sigma S_{t}dW{t}\]

&lt;p&gt;By taking the log of both sides of the equation and using Ito’s lemma, a solution to the stochastic process:&lt;/p&gt;

\[d\log(S_{t}) = (r - \frac{1}{2}\sigma^2)dt + \sigma dW_{t}\]

&lt;p&gt;substituting a constant coefficient for d, (a convinient model simplification) we will obtain the final expression:&lt;/p&gt;

\[d\log(S_{t}) = log(S_{0}) + (r - \frac{1}{2}\sigma^2)t + \sigma W_{t}\]

&lt;p&gt;\(W_{t}\) is a brownian motion process with a mean \(0\) and variance \(T\) and normally distributed random variable \(N(0,1)\):&lt;/p&gt;

\[W_{T} = \sqrt{T}N(0,1)\]

&lt;p&gt;Our final expression for \(S_{t}\) is:&lt;/p&gt;

\[log(S_{T}) = log(S_{0}) + (r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)\]

&lt;p&gt;Raising the \(e\) to the equation, we can simplify to:&lt;/p&gt;

\[S_{T} = S_{0}e^{(r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)}\]

&lt;p&gt;We will continously sample random numbers for $N(0,1)$ into the equation while maintaining a running sum:&lt;/p&gt;

\[f(S) = (S - K)_{+}\]

&lt;p&gt;Where \(K\) is the strike price. The average of this expression where n is the number of random samples we take will be&lt;/p&gt;

\[\frac{\sum_{i}^{n} (S_{0}e^{(r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)} - K)}{n}\]

&lt;h4 id=&quot;final-expression&quot;&gt;Final Expression&lt;/h4&gt;
&lt;p&gt;Our final expression for the fair price of the option will be the above expression multiplied by \(e^{-rT}\) to complete our original black scholes model.&lt;/p&gt;

\[e^{(-rT)}\frac{\sum_{i}^{n} (S_{0}e^{(r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)} - K)}{n}\]

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;##Simple Monte Carlo Pricing Class for Vanilla Call Option
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleMCPricer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#The sigma value on the left side of the exponent
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiry&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#The sigma value on the right side of the e exponent
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root_Variance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Corresponds to the (-1/2 * sigma^2)
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itoCorr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variance&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;##Corresponds to S0e^(rT - 1/2 sigma^2T)
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movedSpot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expiry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itoCorr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runningSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;##Simulate for all paths
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;thisGauss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;##Our rootVariance already has been multiplied by the expiry
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;thisSpot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movedSpot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root_Variance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thisGauss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Determine payoff of this specific path
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;thisPayoff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisSpot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Value of option is zero is our price is less than the strike
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;thisPayoff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisPayoff&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisPayoff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runningSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thisPayoff&lt;/span&gt;
        
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runningSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-the-model&quot;&gt;Run the Model!&lt;/h3&gt;
&lt;p&gt;Let us run the model on an option with expiration in 2 years, with a strike price of 32 dollars, a current price of 30 dollars, a 10% volatility parameter, and a 3% rate of return. We will simulate 1,000,000 paths and determine the fair price.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleMCPricer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.79
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the calculated fair price of the option is 1.79 dollars.&lt;/p&gt;

&lt;h2 id=&quot;sources-and-further-reading&quot;&gt;Sources and Further Reading&lt;/h2&gt;
&lt;p&gt;[1] C++ Design Patterns and Derivatives Pricing, Mark S. Joshi&lt;/p&gt;

&lt;p&gt;[2] The Concepts and Practices of Mathematical Finance, Mark S. Joshi&lt;/p&gt;

&lt;p&gt;[3] Stock price modelling: Theory and Practice, Abdelmoula Dmouj&lt;/p&gt;
</description>
				<pubDate>Thu, 26 Nov 2020 00:00:00 -0800</pubDate>
				<link>/monte-carlo-options-python</link>
				<guid isPermaLink="true">/monte-carlo-options-python</guid>
			</item>
		
			<item>
				<title>Basic Counterfactual Regret Minimization (Rock Paper Scissors)</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/ai.jpg&quot; alt=&quot;AI&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;counterfactual-regret-minimization-rock-paper-scissors&quot;&gt;Counterfactual Regret Minimization (Rock Paper Scissors)&lt;/h1&gt;

&lt;p&gt;Counterfactual regret minimization is an important concept in algorithmic game theory. It has made the creation of super-human poker AI possible and is fundamental for solving games of imperfect information. Today we will be implementing a rock paper scissors solver. Rock paper scissors is a useful introductory example as the game has a trivial solution (just play each option 33.333% of the time randomly). Solving rock paper scissors will lay the groundwork for solving more complex games (which we will do in future articles).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: All Code Implemented In Python&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;high-level-overview&quot;&gt;High Level Overview:&lt;/h3&gt;

&lt;p&gt;The algorithm will start with a hard-coded default strategy profile. At every iteration, the solver will compute a ‘regret matched’ strategy. This is a strategy that makes the minimum viable adjustment according to the observed result. This adjusted result is then added to a running sum of all previous adjustments. The resulting &lt;em&gt;game theory optimal&lt;/em&gt; strategy will be the average of all adjusted strategies (sum of the strategies divided by the number of iterations).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Some Number of Iterations:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compute a regret-matching strategy&lt;/li&gt;
  &lt;li&gt;Add strategy profile to the profile sum&lt;/li&gt;
  &lt;li&gt;Select each player action profile according to the strategy profile&lt;/li&gt;
  &lt;li&gt;Compute regrets&lt;/li&gt;
  &lt;li&gt;Add player regrets to player cumulative regrets&lt;/li&gt;
  &lt;li&gt;Return the average strategy profile&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rock-paper-scissors&quot;&gt;Rock Paper Scissors&lt;/h2&gt;

&lt;p&gt;To solve rock paper scissors we will need to program our agent to keep track of it’s current strategy and update it iteratively. There are 2 variables that are key to the algorithm. The regret sum, and the strategy sum. The regret sum is an array that records all the lost utility by choosing the suboptimal decision in the moment. The strategy sum is the sum of all adjusted strategies.&lt;/p&gt;

&lt;h3 id=&quot;key-variables&quot;&gt;Key Variables:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Indices to access options in strategy list&lt;/li&gt;
  &lt;li&gt;regretSum: A list to keep track of the total regret of each decision&lt;/li&gt;
  &lt;li&gt;strategy: A list to hold the weightings of each option in a mixed strategy&lt;/li&gt;
  &lt;li&gt;strategySum: The sum of all the strategies used thus far&lt;/li&gt;
  &lt;li&gt;oppStrategy: The strategy of a theoretical opponent against whom we must adjust&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;regret-matching&quot;&gt;Regret Matching&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Computes the strategy as the accumulated regrets / total regret&lt;/li&gt;
  &lt;li&gt;Computes the strategy sum as the given strategy sum + the newly derived strategy based on accumulated regrets&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;##Returns the adjusted strategy after an iteration
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#Normalizingsum is the sum of positive regrets. 
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#This ensures do not 'over-adjust' and converge to equilibrium
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;##This loop normalizes our updated strategy
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Default to 33%
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pull-a-random-action-according-to-current-mixed-strategy&quot;&gt;Pull A Random Action According To Current Mixed Strategy&lt;/h3&gt;

&lt;p&gt;This function will choose a random action based on our most updated strategy. Remember that the strategy list stores all the weightings for each action.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#Returns a random action according to the strategy
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;training-algorithm&quot;&gt;Training Algorithm&lt;/h3&gt;

&lt;p&gt;The following algorithm will compute the &lt;em&gt;maximally exploitative strategy&lt;/em&gt; vs a fixed strategy from an opponent. For rock paper scissors, the nash equilibrium strategy dictates that any strategy which performs an action more than 33% dictates that we play the opposing action 100% of the time.&lt;/p&gt;

&lt;h4 id=&quot;maximally-exploitative-strategy-example&quot;&gt;Maximally Exploitative Strategy Example:&lt;/h4&gt;

&lt;p&gt;Let us say our opponent is playing the following strategy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rock: 34%&lt;/li&gt;
  &lt;li&gt;Paper: 33%&lt;/li&gt;
  &lt;li&gt;Scissors: 33%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowing our opponent’s strategy, we can compute the utility of each option&lt;/p&gt;

\[EV(Rock) = .34(0) + .33(-1) + .33(1) = 0\]

&lt;p&gt;The expected value of choosing rock is zero since it ties 34% of the time, loses 33% of the time and wins another 33% of the time.&lt;/p&gt;

\[EV(Scissors) = .34(-1) + .33(1) + .33(0) = -.01\]

&lt;p&gt;The expected value of choosing scissors is -.01 since it loses to rock 34% of the time, wins against paper 33% of the time, and ties to scissors 33% of the time.&lt;/p&gt;

\[EV(Paper) = .34(1) + .33(0) + .33(-1) = .01\]

&lt;p&gt;The expected value of choosing paper is .01 since we win against rock 34% of the time, ties paper 33% of the time, and loses to scissors 33% of the time.&lt;/p&gt;

&lt;p&gt;Knowing that the expected value of choosing paper is higher than any other option, the maximally exploitative strategy would be to always play paper.&lt;/p&gt;

&lt;h4 id=&quot;maximally-exploitative-function&quot;&gt;Maximally Exploitative Function&lt;/h4&gt;

&lt;p&gt;The algorithm for training our agent to learn the maximally exploitative strategy can be described as follows.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Accumulate regretSums after every round&lt;/li&gt;
  &lt;li&gt;Compute a regret-matching strategy based on those regret sums&lt;/li&gt;
  &lt;li&gt;Add Strategy to the sum of all the previously computed profiles&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;##Retrieve Actions
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#print(strategy)
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;myaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Define an arbitrary opponent strategy from which to adjust
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
        &lt;span class=&quot;c1&quot;&gt;#Opponent Chooses scissors
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Rock) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Paper) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Opponent Chooses Rock
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Scissors) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Paper) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Opopnent Chooses Paper
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Rock) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Scissors) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            
        &lt;span class=&quot;c1&quot;&gt;#Add the regrets from this decision
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regretSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;
        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;compute-the-average-strategy&quot;&gt;Compute the average strategy&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Returns the average strategy profile as each option divided by the total sum of all options&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAverageStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;avgStrategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;avgStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategySum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalizingSum&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;avgStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avgStrategy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-the-algorithm&quot;&gt;Run the algorithm!&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Demonstrates that we can generate a maximally exploitative strat&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;oppStrat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opponent's Strategy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Maximally Exploitative Strat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAverageStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Opponent's Strategy [0.4, 0.3, 0.3]
Maximally Exploitative Strat [6.666666666666666e-07, 0.999999, 3.333333333333333e-07]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;have-both-agents-converge-to-nash-equilibrium&quot;&gt;Have Both Agents Converge to Nash Equilibrium&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;We will adapt our training algorithm to train two agents simultaneously&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#Two player training Function
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;train2Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2Strat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;##Adapt Train Function for two players
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategySum1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strategySum2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;##Retrieve Actions
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategySum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategy1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategySum1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;myaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regretSum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2Strat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategy2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategySum2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;#Opponent Chooses scissors
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Rock) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Paper) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Opponent Chooses Rock
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Scissors) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Paper) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#Opopnent Chooses Paper
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Rock) = -1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#Utility(Scissors) = 1
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            
        &lt;span class=&quot;c1&quot;&gt;#Add the regrets from this decision
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regretSum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regretSum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionUtility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategySum1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategySum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#Returns a nash equilibrium reached by two opponents through CFRM
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RPStoNash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train2Player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oppStrat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strats&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RPStoNash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Player 1                                                     Player 2
([0.34083239238186, 0.3340920629119219, 0.3250755447062181], [0.32967926313477963, 0.33222032740623947, 0.3381004094589809]) As we can see. The final strategy is around 33% for all options for each player.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Mon, 23 Nov 2020 00:00:00 -0800</pubDate>
				<link>/CFRM-RPS</link>
				<guid isPermaLink="true">/CFRM-RPS</guid>
			</item>
		
			<item>
				<title>Binary Tree Traversal Cheat Sheet</title>
				<description>&lt;p&gt;Traversing binary trees is a fundamental skill required for coding interviews. Today I will teach you the main ways of traversing a binary tree. Each traversal style is associated with a specific pattern. Below is a quick reference. (All code examples are worked in python)&lt;/p&gt;

&lt;h3 id=&quot;binary-tree-traversal-cheat-sheet&quot;&gt;Binary Tree Traversal Cheat Sheet&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Traversal&lt;/th&gt;
      &lt;th&gt;-&amp;gt;&lt;/th&gt;
      &lt;th&gt;Pattern&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;In-order&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;left/center/right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pre-order&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;center/left/right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;post-order&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;left/right/center&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;level-order&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;left to right&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/binary-tree.PNG&quot; alt=&quot;binary-tree&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;pre-order-traversal&quot;&gt;Pre-Order Traversal&lt;/h4&gt;

&lt;p&gt;A preorder traversal follows the center-left-right pattern. For the tree above, the output would be [0,1,2,6,4,5,7,8,3]&lt;/p&gt;

&lt;h5 id=&quot;solution&quot;&gt;Solution&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;preOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;preOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;in-order-traversal&quot;&gt;In-Order Traversal&lt;/h4&gt;

&lt;p&gt;An inorder traversal follows the left-center-right pattern. The algorithm will traverse as far left as possible and then add each center node with the right node being added last. An in-order traversal of the graph above would output [2,1,4,6,5,0,7,8,3]&lt;/p&gt;

&lt;h5 id=&quot;solution-1&quot;&gt;Solution&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;inOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;post-order-traversal&quot;&gt;Post-Order Traversal&lt;/h4&gt;

&lt;p&gt;A postorder traversal follows the left-right-center pattern. For the tree above the output would be [2,4,5,6,1,8,3,7,0].&lt;/p&gt;

&lt;h5 id=&quot;solution-2&quot;&gt;Solution&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;postOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;postOrderHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;level-order-traversal&quot;&gt;Level Order Traversal&lt;/h4&gt;

&lt;p&gt;A level order traversal will return a two dimensional list of every level in the tree. For the example above, the result would be:&lt;/p&gt;

&lt;p&gt;[[0], [1,7], [2,6,8,3], [4,5]]&lt;/p&gt;

&lt;p&gt;The code below uses a helper function. The helper function keeps track of which level of the tree it is located in.&lt;/p&gt;

&lt;h5 id=&quot;solution-3&quot;&gt;Solution&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;levelOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sat, 21 Nov 2020 00:00:00 -0800</pubDate>
				<link>/binary-tree-traversal-cheat-sheet</link>
				<guid isPermaLink="true">/binary-tree-traversal-cheat-sheet</guid>
			</item>
		
			<item>
				<title>The St. Petersburg Paradox, When EV Isn't Enough</title>
				<description>&lt;p&gt;Today we will discuss a famous problem known as the St. Petersburg Paradox. The problem was originally presented by &lt;a href=&quot;https://en.wikipedia.org/wiki/Daniel_Bernoulli&quot;&gt;Daniel Bernoulli&lt;/a&gt; in 1738 in the Commentaries of the Imperial Academy of Science of Saint Petersburg (hence the name). The problem demonstrates that certain games may have extremely high payoff/utility yet the variance of outcomes can be such that no sensible person would participate (despite extremely high expectation).&lt;/p&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;Suppose you are paying a fixed fee to participate in a coin tossing game. Assume that the coin is evenly weighted (fair). The coin will be tossed repeatedly.&lt;/p&gt;

&lt;p&gt;There is a cash prize that starts at 1$. Every time the coin lands heads, the size of the pot doubles. Once the coin lands of tails, the game ends and you win whatever is contained in the pot.&lt;/p&gt;

&lt;p&gt;How much should you pay to play this game in order to break even?&lt;/p&gt;

&lt;h3 id=&quot;expected-value-of-the-game&quot;&gt;Expected Value of The Game&lt;/h3&gt;

&lt;p&gt;Well from basic decision theory we know that a break-even decision is one where the cost is equal to the utility of a decision. Therefore, in order to calculate the break-even price, we simply need to calculate the expected value of the game.&lt;/p&gt;

&lt;p&gt;We know that the probability of flipping n heads consecutively is&lt;/p&gt;

\[\frac{1}{2^n}\]

&lt;p&gt;Since we win $1 if the first flip is tails (0 heads), the payoff on the nth consecutive head is&lt;/p&gt;

\[2^{n -1}\]

&lt;p&gt;So for a single value of n, where n is the number of consecutive heads we get in a single session of the game, the expectation would be&lt;/p&gt;

\[\frac{1}{2^n} * 2^{n -1}\]

&lt;p&gt;​	Are we done? NO! A single value of n only measures one branch of the game tree. But there are an infinite number of branches on the game tree. The higher n is, the lower the probability of that specific outcome on the game tree, yet there is an outcome for every possible branch. Therefore, the entire expectation can be represented by an infinite sum.&lt;/p&gt;

\[\sum_{n=1}^{\infty} \frac{1}{2^n} * 2^{n -1} = \infty\]

&lt;p&gt;We can see that the infinite sum converges to infinity! Don’t believe me? Let’s step through the sum for each value of n.&lt;/p&gt;

\[E[\infty] = (\frac{1}{2} * 1) + (\frac{1}{4} * 2) + (\frac{1}{8} * 4)...\]

&lt;p&gt;We can see that if we continue we will get an infinite sum of 1/2’s. Therefore, the expectation of the game is infinity! So hypothetically, the break-even price to play this game is also infinity.&lt;/p&gt;

&lt;h3 id=&quot;wheres-the-paradox&quot;&gt;Where’s The Paradox?&lt;/h3&gt;

&lt;p&gt;The paradox is that despite the game having such a high payoff, nobody with common sense would pay more than a few dollars to play the game. This is because the branches of the game tree with high payoffs are extremely hard to reach, yet since the utility of those branches grow at a similar rate, the expectation does not diminish for lower probability events as it would in most games.&lt;/p&gt;
</description>
				<pubDate>Thu, 19 Nov 2020 00:00:00 -0800</pubDate>
				<link>/st-petersburg-paradox</link>
				<guid isPermaLink="true">/st-petersburg-paradox</guid>
			</item>
		
			<item>
				<title>The ONLY Poker Books Worth Reading</title>
				<description>&lt;p&gt;One of the trickiest parts about improving as a Poker player is finding high quality learning resources. There are numerous successful players over the years who have written books on their approaches to the game, yet Poker evolves so quickly that these books are often outdated within a few years.&lt;/p&gt;

&lt;p&gt;During my time playing at &lt;a href=&quot;https://www.encorebostonharbor.com/&quot;&gt;Encore in Boston&lt;/a&gt;, I came across many older gentleman who were poker book junkies. They had read dozens of strategy books yet still struggled to beat relatively easy live games. This is because poker books that actually give quality information are very rare. Additionally, these books are extremely technical and often scare away the mathematically illiterate.&lt;/p&gt;

&lt;p&gt;In this article I will review the few and only books I would ever recommend reading if you want to become a winning player.&lt;/p&gt;

&lt;h3 id=&quot;modern-poker-theory-by-michael-acevedo&quot;&gt;&lt;a href=&quot;https://www.amazon.com/Modern-Poker-Theory-unbeatable-principles/dp/1909457892&quot;&gt;Modern Poker Theory&lt;/a&gt; by Michael Acevedo&lt;/h3&gt;

&lt;p&gt;I genuinely cannot say enough good things about this book. It is a culmination of the best parts of every poker book I’ve ever read and it’s backed by rigorous research in &lt;a href=&quot;https://www.piosolver.com/&quot;&gt;PioSolver&lt;/a&gt;. The author has experienced significant success on the tournament circuit both live and online and has a background as a financial analyst and mathematician.&lt;/p&gt;

&lt;p&gt;This book bridges theoretical analysis with a grounding in practical hand examples without becoming just another hand review book.&lt;/p&gt;

&lt;p&gt;This book is primarily geared towards MTT’s and will be most useful if you are used to playing poker at shorter stack depths. As a cash game player, I still found this book extremely useful as he approaches the game from a formal context grounded in Game Theory.&lt;/p&gt;

&lt;p&gt;In this book, you will learn the following&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fundamental game theory concepts&lt;/li&gt;
  &lt;li&gt;How to classify ranges as condensed, polarized, capped/uncapped based on various situations&lt;/li&gt;
  &lt;li&gt;The relationship between range polarization and bet size&lt;/li&gt;
  &lt;li&gt;How to classify various hands into equity buckets and build a strategy for all your holdings&lt;/li&gt;
  &lt;li&gt;How to analyze complex data and outputs from solvers in order to execute GTO lines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is worth noting that this book alone won’t leave you walking away as a significantly better player, but it will give you the background knowledge to approach the game like a pro.&lt;/p&gt;

&lt;h3 id=&quot;applications-of-no-limit-holdem-by-matthew-janda&quot;&gt;&lt;a href=&quot;https://www.amazon.com/Applications-No-Limit-Hold-Matthew-Janda/dp/1880685558/ref=sr_1_1?dchild=1&amp;amp;keywords=applications+of+no+limit+holdem&amp;amp;qid=1605807752&amp;amp;s=books&amp;amp;sr=1-1&quot;&gt;Applications of No Limit Hold’em&lt;/a&gt; by Matthew Janda&lt;/h3&gt;

&lt;p&gt;Applications of No-limit Holdem is considered a classic and is an essential read for anyone seeking to become a competent player. I consider myself extraordinarily lucky to have read this book early on in my poker journey. It is worth noting that while this book has aged extraordinarily well, there are a few aspects of it that are outdated.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Preflop Ranges: The original preflop ranges in this book were constructed based on frequencies and manual calculations. In the age of solvers, you are better off using ranges constructed from sims.&lt;/li&gt;
  &lt;li&gt;Hand Reviews Chapter: I would recommend skipping the hand reviews chapter at the end of the book since modern solvers have revealed flaws in Matthew’s range construction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This book formed the back-bone of Doug Polk’s strategy and guided much of his analysis. Doug Polk at the height of his career was considered the very best heads up no limit player in the world after beating Ben Sulsky. If you plan on going through this book I would recommend a slow read and to carefully work through all the equations and examples. This will result in a strong foundational knowledge of poker theory which you will be able to build on very rapidly. Applications of No Limit Hold’em can be a daunting read and is theoretically intensive but is absolutely necessary to developing a background in GTO play.&lt;/p&gt;

&lt;h3 id=&quot;expert-heads-up-no-limit-holdem-by-will-tipton&quot;&gt;&lt;a href=&quot;https://www.amazon.com/Expert-Heads-Limit-Holdem-Exploitative/dp/1904468942/ref=sr_1_1?dchild=1&amp;amp;keywords=expert+heads+up+no+limit+hold%27em&amp;amp;qid=1605809356&amp;amp;s=books&amp;amp;sr=1-1&quot;&gt;Expert Heads Up No Limit Hold’em&lt;/a&gt; by Will Tipton&lt;/h3&gt;

&lt;p&gt;Will Tipton has become sort of a cult icon in the Poker Theory community. He was the very first person to create a &lt;a href=&quot;https://www.piosolver.com/blogs/news/62725637-choosing-a-subset-of-flops-to-represent-the-whole-game&quot;&gt;weighted flop subset representation&lt;/a&gt; of the game and even released a package of &lt;a href=&quot;https://husng.com/content/will-tipton-video-pack-0&quot;&gt;video tutorials&lt;/a&gt; with his book that walk through analyzing toy games in &lt;a href=&quot;gambit-project.org/&quot;&gt;Gambit&lt;/a&gt;. Many concepts in the book were completely foreign to most players in the community back in 2012. Additionally, Tipton brings the advantage of his background in theoretical computer science which allows him to rigorously formalize his ideas.&lt;/p&gt;

&lt;p&gt;Some of my favorite lessons from the book are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thinking of expected value in terms of the overall game tree&lt;/li&gt;
  &lt;li&gt;Proper definition of maximally exploitative strategies&lt;/li&gt;
  &lt;li&gt;How iterative exploitation leads to &lt;a href=&quot;https://en.wikipedia.org/wiki/Nash_equilibrium&quot;&gt;nash equilibria&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;How turn and river runouts influence equity distributions&lt;/li&gt;
  &lt;li&gt;Range distributions on various board structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is worth noting that the title of this book is misleading. This book is extremely useful for ALL poker players, not just heads up players. Although, this is the style Will is most known for specializing in.&lt;/p&gt;

&lt;h3 id=&quot;expert-heads-up-no-limit-holdem-volume-2-by-will-tipton&quot;&gt;&lt;a href=&quot;https://www.amazon.com/Expert-Heads-Limit-Holdem-Play/dp/1909457035/ref=sr_1_3?crid=3MW6AB8TPNCVS&amp;amp;dchild=1&amp;amp;keywords=expert+heads+up+no+limit+hold%27em&amp;amp;qid=1605810277&amp;amp;sprefix=expert+heads+up+no+limi%2Caps%2C164&amp;amp;sr=8-3&quot;&gt;Expert Heads Up No Limit Hold’em Volume 2&lt;/a&gt; by Will Tipton&lt;/h3&gt;

&lt;p&gt;Expert heads up No Limit Hold’em is slightly more practical than the first book as it applies his earlier ideas to multi-street situations. This is a welcome contrast to the first volume which focuses primarily on preflop play and turn/river scenarios. The book brings more nebulous concepts down to earth. As a Computer Scientist, I enjoyed this book simply for its mathematical elegance however, I still believe the concepts will hold value for many players. The book also comes with a &lt;a href=&quot;https://www.dandbpoker.com/video/experthunlhe&quot;&gt;video pack&lt;/a&gt; where Tipton walks you through building your own poker game tree solver in Python!&lt;/p&gt;

&lt;h3 id=&quot;no-limit-holdem-for-advanced-players-emphasis-on-tough-games-by-matthew-janda&quot;&gt;&lt;a href=&quot;https://www.amazon.com/No-Limit-Hold-em-Advanced-Players/dp/1880685590/ref=sr_1_3?dchild=1&amp;amp;keywords=no+limit+holdem+for+advanced+players&amp;amp;qid=1605811195&amp;amp;sr=8-3&quot;&gt;No Limit Hold’em For Advanced Players: Emphasis on Tough Games&lt;/a&gt; by Matthew Janda&lt;/h3&gt;

&lt;p&gt;Out of all the books on GTO poker, this is likely the most practical. Matthew walks through an array of common spots in the game and explains reasonable lines to take based on analysis in &lt;a href=&quot;https://www.pokersnowie.com/&quot;&gt;Poker Snowie&lt;/a&gt; and &lt;a href=&quot;https://www.piosolver.com/&quot;&gt;PioSolver&lt;/a&gt;. This book is good for developing overall heuristics for executing GTO strategies at the table. I do not however, think the heuristics are so detailed or advanced that they will necessarily prepare you to beat tough games. That being said, the value in this book is that it is a much easier read than the others and is good for getting your feet wet in GTO.&lt;/p&gt;

&lt;h3 id=&quot;the-grinders-manual-by-peter-clarke&quot;&gt;&lt;a href=&quot;https://www.amazon.com/Grinders-Manual-Complete-Course-Online-ebook/dp/B01GBFF890&quot;&gt;The Grinder’s Manual&lt;/a&gt; by Peter Clarke&lt;/h3&gt;

&lt;p&gt;This book is not a theoretically focused book but rather a very pragmatic book on heuristics for executing somewhat solid lines at the table. The strength of this book is that it’s focused on 6-max cash games and includes some very useful models and approaches for determining which spots are good to C-bet and how to think through ranges. Additionally the book does a good job of explaining the advantages of being in position.&lt;/p&gt;

&lt;p&gt;This book is by far the most beginner friendly book on this list and will lay a great foundation to becoming a winning player. Additionally, the book does an excellent job of covering various HUD stats for effective exploitation of player pool tendencies.&lt;/p&gt;

&lt;h3 id=&quot;mathematics-of-poker-by-bill-chen-and-jerrod-ankenman&quot;&gt;&lt;a href=&quot;https://www.amazon.com/Mathematics-Poker-Bill-Chen/dp/1886070253/ref=sxts_sxwds-bia-wc-nc-drs1_0?cv_ct_cx=mathematics+of+poker&amp;amp;dchild=1&amp;amp;keywords=mathematics+of+poker&amp;amp;pd_rd_i=1886070253&amp;amp;pd_rd_r=d2ac7e2c-691a-4541-bcf7-9d34f317d170&amp;amp;pd_rd_w=cNto7&amp;amp;pd_rd_wg=n10De&amp;amp;pf_rd_p=84ce0865-d9ca-42e3-87ed-168be8f93162&amp;amp;pf_rd_r=NC2KGXFY5KM339ZKVZ8R&amp;amp;psc=1&amp;amp;qid=1605811698&amp;amp;s=digital-text&amp;amp;sr=1-1-88388c6d-14b8-4f70-90f6-05ac39e80cc0&quot;&gt;Mathematics of Poker&lt;/a&gt; by Bill Chen and Jerrod Ankenman&lt;/h3&gt;

&lt;p&gt;Out of all the books on this list, you would be better of reading this last. It’s not that the book itself isn’t brilliant, but rather that the math in the book is so difficult and complex for anyone without a few semesters of university math behind them that it isn’t worth reading for most players. I thoroughly enjoyed the book and recommended it to many of my friends. Many of them reported not being able to make it through the first few chapters. If you have taken Calculus, Probability and Statistics and perhaps a Game Theory course, you’ll get through the book just fine.&lt;/p&gt;

&lt;p&gt;The book is extremely abstracted and generally not applicable to decisions at the table but is an amazing read for those who are fans of mathematics and poker.&lt;/p&gt;

</description>
				<pubDate>Thu, 19 Nov 2020 00:00:00 -0800</pubDate>
				<link>/best-poker-books</link>
				<guid isPermaLink="true">/best-poker-books</guid>
			</item>
		
			<item>
				<title>Poker Theory Fundamentals</title>
				<description>&lt;p&gt;In this article I will lay out the foundational knowledge required to begin learning modern GTO (Game Theory Optimal) poker. At this point, the GTO vs Exploitative debate has essentially been settled and most reasonable people have acknowledged that if you want to be a profitable poker player you need to have a solid understanding of theory. Any exploitation should generally occur as a deliberate deviation from what you understand to be a theoretically correct play. But, if you do not have a foundational understanding of what theoretically correct play even is, your exploitative plays will be based on accurate hunches (at best) and complete delusion (at worst).&lt;/p&gt;

&lt;h3 id=&quot;mathematical-foundations&quot;&gt;Mathematical Foundations&lt;/h3&gt;

&lt;p&gt;Before diving into the foundations of GTO we will cover some very basic poker math. These concepts have been discussed ad nauseam in a variety of poker books but are still wroth being briefly mentioned.&lt;/p&gt;

&lt;h4 id=&quot;hand-combinatorics&quot;&gt;Hand Combinatorics&lt;/h4&gt;
&lt;p&gt;There are three categories of hands:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Suited holdings
    &lt;ul&gt;
      &lt;li&gt;4 combos per holding&lt;/li&gt;
      &lt;li&gt;eg. AKs - 4 combos, one of spades, clubs, diamonds, hearts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unsuited Holdings
    &lt;ul&gt;
      &lt;li&gt;12 combos per holding&lt;/li&gt;
      &lt;li&gt;eg. AKo - 12 combos&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pocket Pairs
    &lt;ul&gt;
      &lt;li&gt;6 combos per holding&lt;/li&gt;
      &lt;li&gt;eg. 66 - 6 combos&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pocket-pair-combinatorics&quot;&gt;Pocket Pair Combinatorics&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Pocket pairs&lt;/strong&gt; have six combos. So for the holding ‘66’ there would be be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;6 hearts 6 diamonds&lt;/li&gt;
  &lt;li&gt;6 hearts 6 spades&lt;/li&gt;
  &lt;li&gt;6 hearts 6 clubs&lt;/li&gt;
  &lt;li&gt;6 diamonds 6 clubs&lt;/li&gt;
  &lt;li&gt;6 diamonds 6 spades&lt;/li&gt;
  &lt;li&gt;6 spades 6 clubs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removing just one 6 from the deck takes the amount of possible combos to 3.
Removing another 6 from the deck brings the possible combos of 6 down to one.
(Check for yourself by trying to exclude a suit and see how many are left.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suited holdings&lt;/strong&gt; have 4 combos. Let’s say we have AKs, removing the ace of hearts would take the number of combos down to 3. Removing  the king of hearts would have no effect since the AhKh combo has already been removed. Thus, the number of a suited combos in an opponent’s range is easy to calculate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Off-suit Holdings&lt;/strong&gt; have 12 combos. The removal factor on off-suit holdings is slightly more nuanced. Take the example of AKo&lt;/p&gt;

&lt;p&gt;AKo - 12 combos&lt;/p&gt;

&lt;p&gt;Each Ace is mapped to exactly three king cards (every suit of king other than it’s own suit). Likewise, each King is mapped to exactly three Ace cards.&lt;/p&gt;

&lt;p&gt;Removing an Ace from the deck will make the possible number of AKo combos 9. Removing an King subsequently will take the number of combos down to 6.&lt;/p&gt;

&lt;h4 id=&quot;outs-and-equity&quot;&gt;Outs and Equity:&lt;/h4&gt;

&lt;p&gt;The amount of outs a hand has is simply the number of possible cards left in the deck that can result in a player making a draw of a pair etc.&lt;/p&gt;

&lt;p&gt;A common mental math calculation is to multiply the number of outs by 4 on the flop for the probability of making a hand such as a flop or a straight by the river and to multiply by 2 on the turn.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Hand Type&lt;/th&gt;
      &lt;th&gt;Outs&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Flush Draw&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Open Ended Straight Draw&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gut-shot Straight draw&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;pot-odds&quot;&gt;Pot Odds:&lt;/h4&gt;

&lt;p&gt;When an opponent bets, pot odds can be calculated as&lt;/p&gt;

\[\frac{bet}{pot + bet}\]

&lt;p&gt;This will give you the frequency at which you would need to call to theoretically keep your opponent indifferent to bluffing you with any two cards (more on this later). But as we will later discover this approach to defense in the game is heavily outdated, however for players who are vastly under or over-defending vs raises and bets, this concept can be helpful.&lt;/p&gt;

&lt;h4 id=&quot;hand-odds&quot;&gt;Hand Odds:&lt;/h4&gt;

&lt;p&gt;This will give you the amount of equity against your opponent’s range required to defend against a bet. Again, this model is outdated and has been disproven by solvers but is still useful for beginners.&lt;/p&gt;

\[\frac{bet}{2*bet + pot}\]

&lt;h3 id=&quot;range-morphology&quot;&gt;Range Morphology&lt;/h3&gt;

&lt;p&gt;A range is a set of hands. Preflop, you have a range for each action, whether you open-raise, 3-bet or flat an open defines that range. You range will interact with flops in a variety of ways. There are a few words we use to describe ranges and their states.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linear Range: A range that contains the best hands, the worst hands, and everything in-between&lt;/li&gt;
  &lt;li&gt;Condensed Range: A range that is condensed contains mostly medium strength hands with very few if any strong and weak hands&lt;/li&gt;
  &lt;li&gt;Polarized: A polarized range contains the strong hands and weak hands but very few if any medium strength hands&lt;/li&gt;
  &lt;li&gt;Capped Range: A capped range is a range that does not contain the very strongest hands on a board runout&lt;/li&gt;
  &lt;li&gt;Uncapped: An uncapped range contains the best possible holdings&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-game-theory-optimal-concepts&quot;&gt;Basic Game Theory Optimal Concepts&lt;/h3&gt;

&lt;p&gt;Now that I have given you a brief summary of the foundations of poker strategy we will now dive into the basics of game theory optimal play.&lt;/p&gt;

&lt;h4 id=&quot;history-of-gto-play&quot;&gt;History of GTO Play&lt;/h4&gt;

&lt;p&gt;The idea of an optimal strategy to poker is as old as the field of game theory itself. Von Neumann cited poker as the inspiration of his early works on game theory and wanted to formalize the strategies behind bluffing. John Nash, and Harold W. Kuhn also developed poker toy games which they solved to equilibrium in order to further develop their ideas on games of hidden information.&lt;/p&gt;

&lt;h4 id=&quot;why-things-are-different-now&quot;&gt;Why Things Are Different Now&lt;/h4&gt;

&lt;p&gt;The old way of conducting game theory research was to come up with a game, formalize the rules, and attempt to calculate an equilibrium and utility payoff structure. After deeply analyzing the game tree, mathematicians could calculate optimal solutions either by hand or with some form of computational assistance.&lt;/p&gt;

&lt;p&gt;This was the technique used by Edward O. Thorpe when he first invented card counting for blackjack. Now, with very fast computers, we can simply run simulations of model poker games and observe their solutions.&lt;/p&gt;

&lt;p&gt;Rather than theorizing about what might be optimal play, we can simply observe optimal play and work backwards in terms of developing heuristics to imitate software.&lt;/p&gt;

&lt;h4 id=&quot;gto-concept-1-minimum-defense-frequency&quot;&gt;GTO Concept 1: Minimum Defense Frequency&lt;/h4&gt;

&lt;p&gt;In around 2013, Matthew Janda published his widely acclaimed book “Applications of No-Limit Hold’em.” This work popularized the concept of minimum defense frequencies and formed the back-bone of success behind many successful poker players such as Doug Polk, Ryan Fee and others.&lt;/p&gt;

&lt;p&gt;Yet, the concept of MDF was not anywhere close to being representative of actual GTO play. It was however, so vastly superior to whatever techniques others were using in their calling/raising strategies at the time, that it made a great many players rich beyond their wildest dreams.&lt;/p&gt;

&lt;p&gt;Let us suppose that you are facing a bet on the river. Your hand consists of a medium strength bluff catcher, where your opponent either holds the nuts, or total air. In other words; your opponent has a ‘perfectly polarized range’ consisting of hands with either 100% equity or 0% equity at an even distribution vs your bluff catcher.&lt;/p&gt;

&lt;p&gt;How would be go about calculating the optimal frequency at which you need to call in order to keep villain indifferent to bluffing? In other words, how can we call in such a way that the EV of betting is effectively zero, and villain gains no additional value by bluffing?&lt;/p&gt;

\[EV[Bluffing] = 0 = (Pot)*(1 - C) - (Bet)*C\]

&lt;p&gt;When villain attempts to bluff us and we fold, he wins whatever is in the pot. When villain attempts to bluff us and we call, he loses whatever it is that he has bet.
By solving for the appropriate calling frequency we arrive at the conclusion that:&lt;/p&gt;

\[C = \frac{Pot}{Pot + Bet}\]

&lt;p&gt;The idea is that by calling at least C% of the time, we can assure that our opponent will not gain any additional utility by betting with a hand that would lose at showdown.&lt;/p&gt;

&lt;h4 id=&quot;gto-concept-2-value-to-bluff-ratios&quot;&gt;GTO Concept 2: Value to Bluff Ratios&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Let there be two players, an IP (in position) and an OOP (out of position) player.&lt;/li&gt;
  &lt;li&gt;Let IP have a perfectly polarized range on the river (hands with either 100% equity or 0% equity) so that whenever OOP calls we effectively win.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Question: What proportion of our river betting range should be value hands (hands that win at showdown) vs what proportion should be bluffs to make the EV of our opponent calling zero?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let X be our bluffing frequency on a river bet&lt;/li&gt;
  &lt;li&gt;Let P be the original size of the pot&lt;/li&gt;
  &lt;li&gt;Let B be the size of our bet&lt;/li&gt;
  &lt;li&gt;Assume EV of Calling - EV of Folding = 0 (Our opponent is indifferent to either actions)&lt;/li&gt;
  &lt;li&gt;EV of Folding is always zero, therefore we need to only solve EV[Call]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our opponent will win the size of the pot + our bet when he calls our bluffs and will lose the size of our bet when he calls our value bets.&lt;/p&gt;

\[EV[Call] = 0 = (P + B)x - B(1 - x)\]

&lt;p&gt;Solving for x&lt;/p&gt;

\[X = B/(P + 2B)\]

&lt;p&gt;Now using our equation we can determine the frequency at which we should be bluffing for any given bet size where B is a fraction of P.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pot Sized Bet (B = P): 33% bluffs&lt;/li&gt;
  &lt;li&gt;3/4 Sized Bet (B = .75P): 30% bluffs&lt;/li&gt;
  &lt;li&gt;1/2 Sized Bet (B = .5P): 25% bluffs&lt;/li&gt;
  &lt;li&gt;1/3 Sized Bet (B = .33P): 20% bluffs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s of course notice that the larger our bet-size the more bluff heavy our range is! To most players this seems counter-intuitive but let’s use some very simple reasoning to think through it.&lt;/p&gt;

&lt;p&gt;When an opponent calls our value bet, we win what’s already in the pot + whatever we risked. When an opponent calls our bluff, we only lose what we risked. Larger bet sizes cause a rational opponent to fold at a higher frequency meaning that we must accordingly add more bluffs.  Additionally, we can afford to lose at showdown often when we bluff since value bets will win us much larger pots. Large bet sizes are positively correlated with a more polarized range (separation between bluffs and value bets) whereas smaller bet sizes are more useful when ranges are too heavy to want to generate folds. This is evident in many solver simulations.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In this article we covered the bare bones fundamentals of poker. If you are a new player I hope you enjoyed this introduction. In future posts, we will dive deeper into solver based poker strategies!&lt;/p&gt;

</description>
				<pubDate>Tue, 17 Nov 2020 00:00:00 -0800</pubDate>
				<link>/poker-theory-fundamentals</link>
				<guid isPermaLink="true">/poker-theory-fundamentals</guid>
			</item>
		
	</channel>
</rss>
