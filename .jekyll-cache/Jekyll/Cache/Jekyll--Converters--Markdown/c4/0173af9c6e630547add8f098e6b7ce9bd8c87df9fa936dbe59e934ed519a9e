I"Ä,<p><img src="/assets/images/black-scholes.jpeg" alt="black-scholes" /></p>

<p>Today we will be pricing a vanilla call option using a monte carlo simulation in Python. Monte Carlo models are used by quantitative analysts to determine accurate and fair prices for securities. Typically, these models are implemented in a fast low level language such as C++. However, for the sake of ease, weâ€™ll be using Python.</p>

<h2 id="pre-requisites">Pre-Requisites:</h2>
<p>Below is a list of pre-requisite knowledge to get the most out of this tutorial.</p>

<h3 id="required">Required:</h3>
<ul>
  <li>Calculus</li>
  <li>Probability and Statistics</li>
  <li>Very basic programming</li>
</ul>

<h3 id="reccomended">Reccomended:</h3>
<ul>
  <li>Stochastic Processes</li>
  <li>Stochastic Calculus or an introductory asset pricing class</li>
</ul>

<h2 id="understanding-the-math">Understanding The Math</h2>
<p>Before diving into the code, weâ€™ll cover some of the basic financial mathematics necessary to understand the model.</p>

<h3 id="assumptions">Assumptions</h3>
<p>In our model we will make the following assumptions.</p>
<ul>
  <li>The price of our stock will generally increase with respect to time</li>
  <li>The expected return is a fixed rate of the current share price</li>
  <li>The stock follows a random-walk behavior</li>
</ul>

<h3 id="the-stock-price-evolution-model">The Stock Price Evolution Model</h3>
<p>We will be using a stochastic differential equation as the model of our stock price evolution. It will consist of a component representing the expected return on the stock $S_{t}$ over an infintesimal period of time $dt$, represented by:</p>

\[\mu S_{t}dt\]

<p>Where \(S_{t}\) is the price of our share with respect to time, and $\mu$ is our expected rate of return.</p>

<p>To make our model representative of real share price behavior we must also add a stochastic element represented by a fixed fraction of our price $\sigma$, our share price \(S_{t}\) and a random walk process \(dW_{t}\) to construct</p>

\[\sigma S_{t} dW_{t}\]

<p>Altogether, we get the equation:</p>

\[dS_{t} = \mu S_{t}dt + \sigma S_{t} dW_{t}\]

<h3 id="black-scholes-option-pricing-model">Black-Scholes Option Pricing Model</h3>
<p>The Black-Scholes option pricing model tells us the the price of a vanilla option with a compounding rate \(r\)
, expiration \(T\) and payoff function \(f\) is:</p>

\[e^{-rT}E(f(S_{T}))\]

<h4 id="solving-for-expectation">Solving for Expectation</h4>
<p>In order to finish deriving an expression for our fair options price, we must solve the expression within the expected payoff function. To begin with, we will use a risk-neutral stochastic differential equation (see stock price evolution model) for the expectation of 
\(S_{t}\):</p>

\[dS_{t} = rS_{t}dt + \sigma S_{t}dW{t}\]

<p>By taking the log of both sides of the equation and using Itoâ€™s lemma, a solution to the stochastic process:</p>

\[d\log(S_{t}) = (r - \frac{1}{2}\sigma^2)dt + \sigma dW_{t}\]

<p>substituting a constant coefficient for d, (a convinient model simplification) we will obtain the final expression:</p>

\[d\log(S_{t}) = log(S_{0}) + (r - \frac{1}{2}\sigma^2)t + \sigma W_{t}\]

<p>\(W_{t}\) is a brownian motion process with a mean \(0\) and variance \(T\) and normally distributed random variable \(N(0,1)\):</p>

\[W_{T} = \sqrt{T}N(0,1)\]

<p>Our final expression for \(S_{t}\) is:</p>

\[log(S_{T}) = log(S_{0}) + (r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)\]

<p>Raising the \(e\) to the equation, we can simplify to:</p>

\[S_{T} = S_{0}e^{(r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)}\]

<p>We will continously sample random numbers for $N(0,1)$ into the equation while maintaining a running sum:</p>

\[f(S) = (S - K)_{+}\]

<p>Where \(K\) is the strike price. The average of this expression where n is the number of random samples we take will be</p>

\[\frac{\sum_{i}^{n} S_{0}e^{(r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)} - K}{n}\]

<h4 id="final-expression">Final Expression</h4>
<p>Our final expression for the fair price of the option will be the above expression multiplied by \(e^{-rT}\) to complete our original black scholes model.</p>

\[e^{(-rT)}\frac{\sum_{i}^{n} S_{0}e^{(r - \frac{1}{2}\sigma^2)T + \sigma \sqrt{T}N(0,1)} - K}{n}\]

<h2 id="the-code">The Code</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="k">class</span> <span class="nc">SimpleMCPricer</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">expiry</span><span class="p">,</span> <span class="n">strike</span><span class="p">,</span> <span class="n">spot</span><span class="p">,</span> <span class="n">vol</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">paths</span><span class="p">):</span>
        <span class="c1">#The sigma value on the left side of the exponent
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">variance</span> <span class="o">=</span> <span class="n">vol</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">expiry</span>
        <span class="c1">#The sigma value on the right side of the e exponent
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">root_Variance</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">variance</span><span class="p">)</span>
        <span class="c1">#Corresponds to the (-1/2 * sigma^2)
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">itoCorr</span> <span class="o">=</span> <span class="o">-</span><span class="mf">0.5</span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">variance</span>
        <span class="c1">##Corresponds to S0e^(rT - 1/2 sigma^2T)
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">movedSpot</span> <span class="o">=</span> <span class="n">spot</span><span class="o">*</span><span class="n">math</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">r</span><span class="o">*</span><span class="n">expiry</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">itoCorr</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">runningSum</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="c1">##Simulate for all paths
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">paths</span><span class="p">):</span>
            <span class="n">thisGauss</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1000</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">thisGauss</span> <span class="o">=</span> <span class="n">thisGauss</span><span class="o">/</span><span class="mi">1000</span>
            <span class="c1">##Our rootVariance already has been multiplied by the expiry
</span>            <span class="n">thisSpot</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">movedSpot</span><span class="o">*</span><span class="n">math</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">root_Variance</span><span class="o">*</span><span class="n">thisGauss</span><span class="p">)</span>
            <span class="c1">#Determine payoff of this specific path
</span>            <span class="n">thisPayoff</span> <span class="o">=</span> <span class="n">thisSpot</span> <span class="o">-</span> <span class="n">strike</span>
            <span class="c1">#Value of option is zero is our price is less than the strike
</span>            <span class="n">thisPayoff</span> <span class="o">=</span> <span class="n">thisPayoff</span> <span class="k">if</span> <span class="n">thisPayoff</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">runningSum</span><span class="o">+=</span><span class="n">thisPayoff</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">mean</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">runningSum</span><span class="o">/</span><span class="n">paths</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mean</span><span class="o">*=</span> <span class="n">math</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">r</span> <span class="o">*</span> <span class="n">expiry</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">getMean</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">round</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">mean</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="run-the-model">Run the Model!</h3>
<p>Let us run the model on an option with expiration in 2 years, with a strike price of 32 dollars, a current price of 30 dollars, a 10% volatility parameter, and a 3% rate of return. We will simulate 100,000 paths and determine the fair price.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span> <span class="o">=</span> <span class="n">SimpleMCPricer</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">30</span><span class="p">,.</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.03</span><span class="p">,</span><span class="mi">1000000</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="n">getMean</span><span class="p">()</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.79
</code></pre></div></div>

<p>As you can see, the calculated fair price of the option is 1.79 dollars.</p>

<h2 id="sources-and-further-reading">Sources and Further Reading</h2>
<p>[1] C++ Design Patterns and Derivatives Pricing, Mark S. Joshi</p>

<p>[2] The Concepts and Practices of Mathematical Finance, Mark S. Joshi</p>

<p>[3] Stock price modelling: Theory and Practice, Abdelmoula Dmouj</p>
:ET